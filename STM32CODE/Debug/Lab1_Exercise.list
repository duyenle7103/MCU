
Lab1_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080021d8  080021d8  000121d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021fc  080021fc  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080021fc  080021fc  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021fc  080021fc  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021fc  080021fc  000121fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002200  08002200  00012200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000084  08002288  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002288  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY
 13 .debug_info   000029fc  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e93  00000000  00000000  00022aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003e0  00000000  00000000  00023980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002c7  00000000  00000000  00023d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015623  00000000  00000000  00024027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004a8c  00000000  00000000  0003964a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00079b55  00000000  00000000  0003e0d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000d7c  00000000  00000000  000b7c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000b89a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	080021c0 	.word	0x080021c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	080021c0 	.word	0x080021c0

0800014c <on_light>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void on_light(enum color light, int cluster)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
	cluster--;
 8000158:	683b      	ldr	r3, [r7, #0]
 800015a:	3b01      	subs	r3, #1
 800015c:	603b      	str	r3, [r7, #0]
	switch (light)
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	2b00      	cmp	r3, #0
 8000162:	d002      	beq.n	800016a <on_light+0x1e>
 8000164:	2b01      	cmp	r3, #1
 8000166:	d041      	beq.n	80001ec <on_light+0xa0>
 8000168:	e081      	b.n	800026e <on_light+0x122>
	{
	case red:
		HAL_GPIO_WritePin(light_port[cluster][red], light_pin[cluster][red], RESET);
 800016a:	4963      	ldr	r1, [pc, #396]	; (80002f8 <on_light+0x1ac>)
 800016c:	683a      	ldr	r2, [r7, #0]
 800016e:	4613      	mov	r3, r2
 8000170:	005b      	lsls	r3, r3, #1
 8000172:	4413      	add	r3, r2
 8000174:	009b      	lsls	r3, r3, #2
 8000176:	440b      	add	r3, r1
 8000178:	6818      	ldr	r0, [r3, #0]
 800017a:	4960      	ldr	r1, [pc, #384]	; (80002fc <on_light+0x1b0>)
 800017c:	683a      	ldr	r2, [r7, #0]
 800017e:	4613      	mov	r3, r2
 8000180:	005b      	lsls	r3, r3, #1
 8000182:	4413      	add	r3, r2
 8000184:	005b      	lsls	r3, r3, #1
 8000186:	440b      	add	r3, r1
 8000188:	881b      	ldrh	r3, [r3, #0]
 800018a:	2200      	movs	r2, #0
 800018c:	4619      	mov	r1, r3
 800018e:	f001 fbf5 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(light_port[cluster][yellow], light_pin[cluster][yellow], SET);
 8000192:	4959      	ldr	r1, [pc, #356]	; (80002f8 <on_light+0x1ac>)
 8000194:	683a      	ldr	r2, [r7, #0]
 8000196:	4613      	mov	r3, r2
 8000198:	005b      	lsls	r3, r3, #1
 800019a:	4413      	add	r3, r2
 800019c:	009b      	lsls	r3, r3, #2
 800019e:	440b      	add	r3, r1
 80001a0:	3304      	adds	r3, #4
 80001a2:	6818      	ldr	r0, [r3, #0]
 80001a4:	4955      	ldr	r1, [pc, #340]	; (80002fc <on_light+0x1b0>)
 80001a6:	683a      	ldr	r2, [r7, #0]
 80001a8:	4613      	mov	r3, r2
 80001aa:	005b      	lsls	r3, r3, #1
 80001ac:	4413      	add	r3, r2
 80001ae:	005b      	lsls	r3, r3, #1
 80001b0:	440b      	add	r3, r1
 80001b2:	3302      	adds	r3, #2
 80001b4:	881b      	ldrh	r3, [r3, #0]
 80001b6:	2201      	movs	r2, #1
 80001b8:	4619      	mov	r1, r3
 80001ba:	f001 fbdf 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(light_port[cluster][green], light_pin[cluster][green], SET);
 80001be:	494e      	ldr	r1, [pc, #312]	; (80002f8 <on_light+0x1ac>)
 80001c0:	683a      	ldr	r2, [r7, #0]
 80001c2:	4613      	mov	r3, r2
 80001c4:	005b      	lsls	r3, r3, #1
 80001c6:	4413      	add	r3, r2
 80001c8:	009b      	lsls	r3, r3, #2
 80001ca:	440b      	add	r3, r1
 80001cc:	3308      	adds	r3, #8
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	494a      	ldr	r1, [pc, #296]	; (80002fc <on_light+0x1b0>)
 80001d2:	683a      	ldr	r2, [r7, #0]
 80001d4:	4613      	mov	r3, r2
 80001d6:	005b      	lsls	r3, r3, #1
 80001d8:	4413      	add	r3, r2
 80001da:	005b      	lsls	r3, r3, #1
 80001dc:	440b      	add	r3, r1
 80001de:	3304      	adds	r3, #4
 80001e0:	881b      	ldrh	r3, [r3, #0]
 80001e2:	2201      	movs	r2, #1
 80001e4:	4619      	mov	r1, r3
 80001e6:	f001 fbc9 	bl	800197c <HAL_GPIO_WritePin>
		break;
 80001ea:	e081      	b.n	80002f0 <on_light+0x1a4>
	case yellow:
		HAL_GPIO_WritePin(light_port[cluster][red], light_pin[cluster][red], SET);
 80001ec:	4942      	ldr	r1, [pc, #264]	; (80002f8 <on_light+0x1ac>)
 80001ee:	683a      	ldr	r2, [r7, #0]
 80001f0:	4613      	mov	r3, r2
 80001f2:	005b      	lsls	r3, r3, #1
 80001f4:	4413      	add	r3, r2
 80001f6:	009b      	lsls	r3, r3, #2
 80001f8:	440b      	add	r3, r1
 80001fa:	6818      	ldr	r0, [r3, #0]
 80001fc:	493f      	ldr	r1, [pc, #252]	; (80002fc <on_light+0x1b0>)
 80001fe:	683a      	ldr	r2, [r7, #0]
 8000200:	4613      	mov	r3, r2
 8000202:	005b      	lsls	r3, r3, #1
 8000204:	4413      	add	r3, r2
 8000206:	005b      	lsls	r3, r3, #1
 8000208:	440b      	add	r3, r1
 800020a:	881b      	ldrh	r3, [r3, #0]
 800020c:	2201      	movs	r2, #1
 800020e:	4619      	mov	r1, r3
 8000210:	f001 fbb4 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(light_port[cluster][yellow], light_pin[cluster][yellow], RESET);
 8000214:	4938      	ldr	r1, [pc, #224]	; (80002f8 <on_light+0x1ac>)
 8000216:	683a      	ldr	r2, [r7, #0]
 8000218:	4613      	mov	r3, r2
 800021a:	005b      	lsls	r3, r3, #1
 800021c:	4413      	add	r3, r2
 800021e:	009b      	lsls	r3, r3, #2
 8000220:	440b      	add	r3, r1
 8000222:	3304      	adds	r3, #4
 8000224:	6818      	ldr	r0, [r3, #0]
 8000226:	4935      	ldr	r1, [pc, #212]	; (80002fc <on_light+0x1b0>)
 8000228:	683a      	ldr	r2, [r7, #0]
 800022a:	4613      	mov	r3, r2
 800022c:	005b      	lsls	r3, r3, #1
 800022e:	4413      	add	r3, r2
 8000230:	005b      	lsls	r3, r3, #1
 8000232:	440b      	add	r3, r1
 8000234:	3302      	adds	r3, #2
 8000236:	881b      	ldrh	r3, [r3, #0]
 8000238:	2200      	movs	r2, #0
 800023a:	4619      	mov	r1, r3
 800023c:	f001 fb9e 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(light_port[cluster][green], light_pin[cluster][green], SET);
 8000240:	492d      	ldr	r1, [pc, #180]	; (80002f8 <on_light+0x1ac>)
 8000242:	683a      	ldr	r2, [r7, #0]
 8000244:	4613      	mov	r3, r2
 8000246:	005b      	lsls	r3, r3, #1
 8000248:	4413      	add	r3, r2
 800024a:	009b      	lsls	r3, r3, #2
 800024c:	440b      	add	r3, r1
 800024e:	3308      	adds	r3, #8
 8000250:	6818      	ldr	r0, [r3, #0]
 8000252:	492a      	ldr	r1, [pc, #168]	; (80002fc <on_light+0x1b0>)
 8000254:	683a      	ldr	r2, [r7, #0]
 8000256:	4613      	mov	r3, r2
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	4413      	add	r3, r2
 800025c:	005b      	lsls	r3, r3, #1
 800025e:	440b      	add	r3, r1
 8000260:	3304      	adds	r3, #4
 8000262:	881b      	ldrh	r3, [r3, #0]
 8000264:	2201      	movs	r2, #1
 8000266:	4619      	mov	r1, r3
 8000268:	f001 fb88 	bl	800197c <HAL_GPIO_WritePin>
		break;
 800026c:	e040      	b.n	80002f0 <on_light+0x1a4>
	default:
		HAL_GPIO_WritePin(light_port[cluster][red], light_pin[cluster][red], SET);
 800026e:	4922      	ldr	r1, [pc, #136]	; (80002f8 <on_light+0x1ac>)
 8000270:	683a      	ldr	r2, [r7, #0]
 8000272:	4613      	mov	r3, r2
 8000274:	005b      	lsls	r3, r3, #1
 8000276:	4413      	add	r3, r2
 8000278:	009b      	lsls	r3, r3, #2
 800027a:	440b      	add	r3, r1
 800027c:	6818      	ldr	r0, [r3, #0]
 800027e:	491f      	ldr	r1, [pc, #124]	; (80002fc <on_light+0x1b0>)
 8000280:	683a      	ldr	r2, [r7, #0]
 8000282:	4613      	mov	r3, r2
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	4413      	add	r3, r2
 8000288:	005b      	lsls	r3, r3, #1
 800028a:	440b      	add	r3, r1
 800028c:	881b      	ldrh	r3, [r3, #0]
 800028e:	2201      	movs	r2, #1
 8000290:	4619      	mov	r1, r3
 8000292:	f001 fb73 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(light_port[cluster][yellow], light_pin[cluster][yellow], SET);
 8000296:	4918      	ldr	r1, [pc, #96]	; (80002f8 <on_light+0x1ac>)
 8000298:	683a      	ldr	r2, [r7, #0]
 800029a:	4613      	mov	r3, r2
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	4413      	add	r3, r2
 80002a0:	009b      	lsls	r3, r3, #2
 80002a2:	440b      	add	r3, r1
 80002a4:	3304      	adds	r3, #4
 80002a6:	6818      	ldr	r0, [r3, #0]
 80002a8:	4914      	ldr	r1, [pc, #80]	; (80002fc <on_light+0x1b0>)
 80002aa:	683a      	ldr	r2, [r7, #0]
 80002ac:	4613      	mov	r3, r2
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	4413      	add	r3, r2
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	440b      	add	r3, r1
 80002b6:	3302      	adds	r3, #2
 80002b8:	881b      	ldrh	r3, [r3, #0]
 80002ba:	2201      	movs	r2, #1
 80002bc:	4619      	mov	r1, r3
 80002be:	f001 fb5d 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(light_port[cluster][green], light_pin[cluster][green], RESET);
 80002c2:	490d      	ldr	r1, [pc, #52]	; (80002f8 <on_light+0x1ac>)
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	4613      	mov	r3, r2
 80002c8:	005b      	lsls	r3, r3, #1
 80002ca:	4413      	add	r3, r2
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	440b      	add	r3, r1
 80002d0:	3308      	adds	r3, #8
 80002d2:	6818      	ldr	r0, [r3, #0]
 80002d4:	4909      	ldr	r1, [pc, #36]	; (80002fc <on_light+0x1b0>)
 80002d6:	683a      	ldr	r2, [r7, #0]
 80002d8:	4613      	mov	r3, r2
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	4413      	add	r3, r2
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	440b      	add	r3, r1
 80002e2:	3304      	adds	r3, #4
 80002e4:	881b      	ldrh	r3, [r3, #0]
 80002e6:	2200      	movs	r2, #0
 80002e8:	4619      	mov	r1, r3
 80002ea:	f001 fb47 	bl	800197c <HAL_GPIO_WritePin>
	}
}
 80002ee:	bf00      	nop
 80002f0:	bf00      	nop
 80002f2:	3708      	adds	r7, #8
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000000 	.word	0x20000000
 80002fc:	20000018 	.word	0x20000018

08000300 <display7SEG>:
void display7SEG(int num, int cluster)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
	cluster--;
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	3b01      	subs	r3, #1
 800030e:	603b      	str	r3, [r7, #0]
	switch (num)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2b09      	cmp	r3, #9
 8000314:	f200 862a 	bhi.w	8000f6c <display7SEG+0xc6c>
 8000318:	a201      	add	r2, pc, #4	; (adr r2, 8000320 <display7SEG+0x20>)
 800031a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800031e:	bf00      	nop
 8000320:	08000349 	.word	0x08000349
 8000324:	0800047d 	.word	0x0800047d
 8000328:	080005b9 	.word	0x080005b9
 800032c:	080006ed 	.word	0x080006ed
 8000330:	08000829 	.word	0x08000829
 8000334:	0800095b 	.word	0x0800095b
 8000338:	08000a95 	.word	0x08000a95
 800033c:	08000bc7 	.word	0x08000bc7
 8000340:	08000d01 	.word	0x08000d01
 8000344:	08000e33 	.word	0x08000e33
	{
	case 0:
		HAL_GPIO_WritePin(C7SEG_port[cluster][a_], C7SEG_pin[cluster][a_], RESET);
 8000348:	4999      	ldr	r1, [pc, #612]	; (80005b0 <display7SEG+0x2b0>)
 800034a:	683a      	ldr	r2, [r7, #0]
 800034c:	4613      	mov	r3, r2
 800034e:	00db      	lsls	r3, r3, #3
 8000350:	1a9b      	subs	r3, r3, r2
 8000352:	009b      	lsls	r3, r3, #2
 8000354:	440b      	add	r3, r1
 8000356:	6818      	ldr	r0, [r3, #0]
 8000358:	4996      	ldr	r1, [pc, #600]	; (80005b4 <display7SEG+0x2b4>)
 800035a:	683a      	ldr	r2, [r7, #0]
 800035c:	4613      	mov	r3, r2
 800035e:	00db      	lsls	r3, r3, #3
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	005b      	lsls	r3, r3, #1
 8000364:	440b      	add	r3, r1
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	2200      	movs	r2, #0
 800036a:	4619      	mov	r1, r3
 800036c:	f001 fb06 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][b_], C7SEG_pin[cluster][b_], RESET);
 8000370:	498f      	ldr	r1, [pc, #572]	; (80005b0 <display7SEG+0x2b0>)
 8000372:	683a      	ldr	r2, [r7, #0]
 8000374:	4613      	mov	r3, r2
 8000376:	00db      	lsls	r3, r3, #3
 8000378:	1a9b      	subs	r3, r3, r2
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	440b      	add	r3, r1
 800037e:	3304      	adds	r3, #4
 8000380:	6818      	ldr	r0, [r3, #0]
 8000382:	498c      	ldr	r1, [pc, #560]	; (80005b4 <display7SEG+0x2b4>)
 8000384:	683a      	ldr	r2, [r7, #0]
 8000386:	4613      	mov	r3, r2
 8000388:	00db      	lsls	r3, r3, #3
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	440b      	add	r3, r1
 8000390:	3302      	adds	r3, #2
 8000392:	881b      	ldrh	r3, [r3, #0]
 8000394:	2200      	movs	r2, #0
 8000396:	4619      	mov	r1, r3
 8000398:	f001 faf0 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][c_], C7SEG_pin[cluster][c_], RESET);
 800039c:	4984      	ldr	r1, [pc, #528]	; (80005b0 <display7SEG+0x2b0>)
 800039e:	683a      	ldr	r2, [r7, #0]
 80003a0:	4613      	mov	r3, r2
 80003a2:	00db      	lsls	r3, r3, #3
 80003a4:	1a9b      	subs	r3, r3, r2
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	440b      	add	r3, r1
 80003aa:	3308      	adds	r3, #8
 80003ac:	6818      	ldr	r0, [r3, #0]
 80003ae:	4981      	ldr	r1, [pc, #516]	; (80005b4 <display7SEG+0x2b4>)
 80003b0:	683a      	ldr	r2, [r7, #0]
 80003b2:	4613      	mov	r3, r2
 80003b4:	00db      	lsls	r3, r3, #3
 80003b6:	1a9b      	subs	r3, r3, r2
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	440b      	add	r3, r1
 80003bc:	3304      	adds	r3, #4
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	2200      	movs	r2, #0
 80003c2:	4619      	mov	r1, r3
 80003c4:	f001 fada 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][d_], C7SEG_pin[cluster][d_], RESET);
 80003c8:	4979      	ldr	r1, [pc, #484]	; (80005b0 <display7SEG+0x2b0>)
 80003ca:	683a      	ldr	r2, [r7, #0]
 80003cc:	4613      	mov	r3, r2
 80003ce:	00db      	lsls	r3, r3, #3
 80003d0:	1a9b      	subs	r3, r3, r2
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	440b      	add	r3, r1
 80003d6:	330c      	adds	r3, #12
 80003d8:	6818      	ldr	r0, [r3, #0]
 80003da:	4976      	ldr	r1, [pc, #472]	; (80005b4 <display7SEG+0x2b4>)
 80003dc:	683a      	ldr	r2, [r7, #0]
 80003de:	4613      	mov	r3, r2
 80003e0:	00db      	lsls	r3, r3, #3
 80003e2:	1a9b      	subs	r3, r3, r2
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	440b      	add	r3, r1
 80003e8:	3306      	adds	r3, #6
 80003ea:	881b      	ldrh	r3, [r3, #0]
 80003ec:	2200      	movs	r2, #0
 80003ee:	4619      	mov	r1, r3
 80003f0:	f001 fac4 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][e_], C7SEG_pin[cluster][e_], RESET);
 80003f4:	496e      	ldr	r1, [pc, #440]	; (80005b0 <display7SEG+0x2b0>)
 80003f6:	683a      	ldr	r2, [r7, #0]
 80003f8:	4613      	mov	r3, r2
 80003fa:	00db      	lsls	r3, r3, #3
 80003fc:	1a9b      	subs	r3, r3, r2
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	440b      	add	r3, r1
 8000402:	3310      	adds	r3, #16
 8000404:	6818      	ldr	r0, [r3, #0]
 8000406:	496b      	ldr	r1, [pc, #428]	; (80005b4 <display7SEG+0x2b4>)
 8000408:	683a      	ldr	r2, [r7, #0]
 800040a:	4613      	mov	r3, r2
 800040c:	00db      	lsls	r3, r3, #3
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	005b      	lsls	r3, r3, #1
 8000412:	440b      	add	r3, r1
 8000414:	3308      	adds	r3, #8
 8000416:	881b      	ldrh	r3, [r3, #0]
 8000418:	2200      	movs	r2, #0
 800041a:	4619      	mov	r1, r3
 800041c:	f001 faae 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][f_], C7SEG_pin[cluster][f_], RESET);
 8000420:	4963      	ldr	r1, [pc, #396]	; (80005b0 <display7SEG+0x2b0>)
 8000422:	683a      	ldr	r2, [r7, #0]
 8000424:	4613      	mov	r3, r2
 8000426:	00db      	lsls	r3, r3, #3
 8000428:	1a9b      	subs	r3, r3, r2
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	440b      	add	r3, r1
 800042e:	3314      	adds	r3, #20
 8000430:	6818      	ldr	r0, [r3, #0]
 8000432:	4960      	ldr	r1, [pc, #384]	; (80005b4 <display7SEG+0x2b4>)
 8000434:	683a      	ldr	r2, [r7, #0]
 8000436:	4613      	mov	r3, r2
 8000438:	00db      	lsls	r3, r3, #3
 800043a:	1a9b      	subs	r3, r3, r2
 800043c:	005b      	lsls	r3, r3, #1
 800043e:	440b      	add	r3, r1
 8000440:	330a      	adds	r3, #10
 8000442:	881b      	ldrh	r3, [r3, #0]
 8000444:	2200      	movs	r2, #0
 8000446:	4619      	mov	r1, r3
 8000448:	f001 fa98 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][g_], C7SEG_pin[cluster][g_], SET);
 800044c:	4958      	ldr	r1, [pc, #352]	; (80005b0 <display7SEG+0x2b0>)
 800044e:	683a      	ldr	r2, [r7, #0]
 8000450:	4613      	mov	r3, r2
 8000452:	00db      	lsls	r3, r3, #3
 8000454:	1a9b      	subs	r3, r3, r2
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	440b      	add	r3, r1
 800045a:	3318      	adds	r3, #24
 800045c:	6818      	ldr	r0, [r3, #0]
 800045e:	4955      	ldr	r1, [pc, #340]	; (80005b4 <display7SEG+0x2b4>)
 8000460:	683a      	ldr	r2, [r7, #0]
 8000462:	4613      	mov	r3, r2
 8000464:	00db      	lsls	r3, r3, #3
 8000466:	1a9b      	subs	r3, r3, r2
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	440b      	add	r3, r1
 800046c:	330c      	adds	r3, #12
 800046e:	881b      	ldrh	r3, [r3, #0]
 8000470:	2201      	movs	r2, #1
 8000472:	4619      	mov	r1, r3
 8000474:	f001 fa82 	bl	800197c <HAL_GPIO_WritePin>
		break;
 8000478:	f000 be11 	b.w	800109e <display7SEG+0xd9e>
	case 1:
		HAL_GPIO_WritePin(C7SEG_port[cluster][a_], C7SEG_pin[cluster][a_], SET);
 800047c:	494c      	ldr	r1, [pc, #304]	; (80005b0 <display7SEG+0x2b0>)
 800047e:	683a      	ldr	r2, [r7, #0]
 8000480:	4613      	mov	r3, r2
 8000482:	00db      	lsls	r3, r3, #3
 8000484:	1a9b      	subs	r3, r3, r2
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	440b      	add	r3, r1
 800048a:	6818      	ldr	r0, [r3, #0]
 800048c:	4949      	ldr	r1, [pc, #292]	; (80005b4 <display7SEG+0x2b4>)
 800048e:	683a      	ldr	r2, [r7, #0]
 8000490:	4613      	mov	r3, r2
 8000492:	00db      	lsls	r3, r3, #3
 8000494:	1a9b      	subs	r3, r3, r2
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	440b      	add	r3, r1
 800049a:	881b      	ldrh	r3, [r3, #0]
 800049c:	2201      	movs	r2, #1
 800049e:	4619      	mov	r1, r3
 80004a0:	f001 fa6c 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][b_], C7SEG_pin[cluster][b_], RESET);
 80004a4:	4942      	ldr	r1, [pc, #264]	; (80005b0 <display7SEG+0x2b0>)
 80004a6:	683a      	ldr	r2, [r7, #0]
 80004a8:	4613      	mov	r3, r2
 80004aa:	00db      	lsls	r3, r3, #3
 80004ac:	1a9b      	subs	r3, r3, r2
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	440b      	add	r3, r1
 80004b2:	3304      	adds	r3, #4
 80004b4:	6818      	ldr	r0, [r3, #0]
 80004b6:	493f      	ldr	r1, [pc, #252]	; (80005b4 <display7SEG+0x2b4>)
 80004b8:	683a      	ldr	r2, [r7, #0]
 80004ba:	4613      	mov	r3, r2
 80004bc:	00db      	lsls	r3, r3, #3
 80004be:	1a9b      	subs	r3, r3, r2
 80004c0:	005b      	lsls	r3, r3, #1
 80004c2:	440b      	add	r3, r1
 80004c4:	3302      	adds	r3, #2
 80004c6:	881b      	ldrh	r3, [r3, #0]
 80004c8:	2200      	movs	r2, #0
 80004ca:	4619      	mov	r1, r3
 80004cc:	f001 fa56 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][c_], C7SEG_pin[cluster][c_], RESET);
 80004d0:	4937      	ldr	r1, [pc, #220]	; (80005b0 <display7SEG+0x2b0>)
 80004d2:	683a      	ldr	r2, [r7, #0]
 80004d4:	4613      	mov	r3, r2
 80004d6:	00db      	lsls	r3, r3, #3
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	440b      	add	r3, r1
 80004de:	3308      	adds	r3, #8
 80004e0:	6818      	ldr	r0, [r3, #0]
 80004e2:	4934      	ldr	r1, [pc, #208]	; (80005b4 <display7SEG+0x2b4>)
 80004e4:	683a      	ldr	r2, [r7, #0]
 80004e6:	4613      	mov	r3, r2
 80004e8:	00db      	lsls	r3, r3, #3
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	440b      	add	r3, r1
 80004f0:	3304      	adds	r3, #4
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	2200      	movs	r2, #0
 80004f6:	4619      	mov	r1, r3
 80004f8:	f001 fa40 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][d_], C7SEG_pin[cluster][d_], SET);
 80004fc:	492c      	ldr	r1, [pc, #176]	; (80005b0 <display7SEG+0x2b0>)
 80004fe:	683a      	ldr	r2, [r7, #0]
 8000500:	4613      	mov	r3, r2
 8000502:	00db      	lsls	r3, r3, #3
 8000504:	1a9b      	subs	r3, r3, r2
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	440b      	add	r3, r1
 800050a:	330c      	adds	r3, #12
 800050c:	6818      	ldr	r0, [r3, #0]
 800050e:	4929      	ldr	r1, [pc, #164]	; (80005b4 <display7SEG+0x2b4>)
 8000510:	683a      	ldr	r2, [r7, #0]
 8000512:	4613      	mov	r3, r2
 8000514:	00db      	lsls	r3, r3, #3
 8000516:	1a9b      	subs	r3, r3, r2
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	440b      	add	r3, r1
 800051c:	3306      	adds	r3, #6
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	2201      	movs	r2, #1
 8000522:	4619      	mov	r1, r3
 8000524:	f001 fa2a 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][e_], C7SEG_pin[cluster][e_], SET);
 8000528:	4921      	ldr	r1, [pc, #132]	; (80005b0 <display7SEG+0x2b0>)
 800052a:	683a      	ldr	r2, [r7, #0]
 800052c:	4613      	mov	r3, r2
 800052e:	00db      	lsls	r3, r3, #3
 8000530:	1a9b      	subs	r3, r3, r2
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	440b      	add	r3, r1
 8000536:	3310      	adds	r3, #16
 8000538:	6818      	ldr	r0, [r3, #0]
 800053a:	491e      	ldr	r1, [pc, #120]	; (80005b4 <display7SEG+0x2b4>)
 800053c:	683a      	ldr	r2, [r7, #0]
 800053e:	4613      	mov	r3, r2
 8000540:	00db      	lsls	r3, r3, #3
 8000542:	1a9b      	subs	r3, r3, r2
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	440b      	add	r3, r1
 8000548:	3308      	adds	r3, #8
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	2201      	movs	r2, #1
 800054e:	4619      	mov	r1, r3
 8000550:	f001 fa14 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][f_], C7SEG_pin[cluster][f_], SET);
 8000554:	4916      	ldr	r1, [pc, #88]	; (80005b0 <display7SEG+0x2b0>)
 8000556:	683a      	ldr	r2, [r7, #0]
 8000558:	4613      	mov	r3, r2
 800055a:	00db      	lsls	r3, r3, #3
 800055c:	1a9b      	subs	r3, r3, r2
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	440b      	add	r3, r1
 8000562:	3314      	adds	r3, #20
 8000564:	6818      	ldr	r0, [r3, #0]
 8000566:	4913      	ldr	r1, [pc, #76]	; (80005b4 <display7SEG+0x2b4>)
 8000568:	683a      	ldr	r2, [r7, #0]
 800056a:	4613      	mov	r3, r2
 800056c:	00db      	lsls	r3, r3, #3
 800056e:	1a9b      	subs	r3, r3, r2
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	440b      	add	r3, r1
 8000574:	330a      	adds	r3, #10
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	2201      	movs	r2, #1
 800057a:	4619      	mov	r1, r3
 800057c:	f001 f9fe 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][g_], C7SEG_pin[cluster][g_], SET);
 8000580:	490b      	ldr	r1, [pc, #44]	; (80005b0 <display7SEG+0x2b0>)
 8000582:	683a      	ldr	r2, [r7, #0]
 8000584:	4613      	mov	r3, r2
 8000586:	00db      	lsls	r3, r3, #3
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	440b      	add	r3, r1
 800058e:	3318      	adds	r3, #24
 8000590:	6818      	ldr	r0, [r3, #0]
 8000592:	4908      	ldr	r1, [pc, #32]	; (80005b4 <display7SEG+0x2b4>)
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	4613      	mov	r3, r2
 8000598:	00db      	lsls	r3, r3, #3
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	440b      	add	r3, r1
 80005a0:	330c      	adds	r3, #12
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	2201      	movs	r2, #1
 80005a6:	4619      	mov	r1, r3
 80005a8:	f001 f9e8 	bl	800197c <HAL_GPIO_WritePin>
		break;
 80005ac:	f000 bd77 	b.w	800109e <display7SEG+0xd9e>
 80005b0:	20000024 	.word	0x20000024
 80005b4:	2000005c 	.word	0x2000005c
	case 2:
		HAL_GPIO_WritePin(C7SEG_port[cluster][a_], C7SEG_pin[cluster][a_], RESET);
 80005b8:	4999      	ldr	r1, [pc, #612]	; (8000820 <display7SEG+0x520>)
 80005ba:	683a      	ldr	r2, [r7, #0]
 80005bc:	4613      	mov	r3, r2
 80005be:	00db      	lsls	r3, r3, #3
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	440b      	add	r3, r1
 80005c6:	6818      	ldr	r0, [r3, #0]
 80005c8:	4996      	ldr	r1, [pc, #600]	; (8000824 <display7SEG+0x524>)
 80005ca:	683a      	ldr	r2, [r7, #0]
 80005cc:	4613      	mov	r3, r2
 80005ce:	00db      	lsls	r3, r3, #3
 80005d0:	1a9b      	subs	r3, r3, r2
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	440b      	add	r3, r1
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	2200      	movs	r2, #0
 80005da:	4619      	mov	r1, r3
 80005dc:	f001 f9ce 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][b_], C7SEG_pin[cluster][b_], RESET);
 80005e0:	498f      	ldr	r1, [pc, #572]	; (8000820 <display7SEG+0x520>)
 80005e2:	683a      	ldr	r2, [r7, #0]
 80005e4:	4613      	mov	r3, r2
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	440b      	add	r3, r1
 80005ee:	3304      	adds	r3, #4
 80005f0:	6818      	ldr	r0, [r3, #0]
 80005f2:	498c      	ldr	r1, [pc, #560]	; (8000824 <display7SEG+0x524>)
 80005f4:	683a      	ldr	r2, [r7, #0]
 80005f6:	4613      	mov	r3, r2
 80005f8:	00db      	lsls	r3, r3, #3
 80005fa:	1a9b      	subs	r3, r3, r2
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	440b      	add	r3, r1
 8000600:	3302      	adds	r3, #2
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	2200      	movs	r2, #0
 8000606:	4619      	mov	r1, r3
 8000608:	f001 f9b8 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][c_], C7SEG_pin[cluster][c_], SET);
 800060c:	4984      	ldr	r1, [pc, #528]	; (8000820 <display7SEG+0x520>)
 800060e:	683a      	ldr	r2, [r7, #0]
 8000610:	4613      	mov	r3, r2
 8000612:	00db      	lsls	r3, r3, #3
 8000614:	1a9b      	subs	r3, r3, r2
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	440b      	add	r3, r1
 800061a:	3308      	adds	r3, #8
 800061c:	6818      	ldr	r0, [r3, #0]
 800061e:	4981      	ldr	r1, [pc, #516]	; (8000824 <display7SEG+0x524>)
 8000620:	683a      	ldr	r2, [r7, #0]
 8000622:	4613      	mov	r3, r2
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	1a9b      	subs	r3, r3, r2
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	440b      	add	r3, r1
 800062c:	3304      	adds	r3, #4
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	2201      	movs	r2, #1
 8000632:	4619      	mov	r1, r3
 8000634:	f001 f9a2 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][d_], C7SEG_pin[cluster][d_], RESET);
 8000638:	4979      	ldr	r1, [pc, #484]	; (8000820 <display7SEG+0x520>)
 800063a:	683a      	ldr	r2, [r7, #0]
 800063c:	4613      	mov	r3, r2
 800063e:	00db      	lsls	r3, r3, #3
 8000640:	1a9b      	subs	r3, r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	440b      	add	r3, r1
 8000646:	330c      	adds	r3, #12
 8000648:	6818      	ldr	r0, [r3, #0]
 800064a:	4976      	ldr	r1, [pc, #472]	; (8000824 <display7SEG+0x524>)
 800064c:	683a      	ldr	r2, [r7, #0]
 800064e:	4613      	mov	r3, r2
 8000650:	00db      	lsls	r3, r3, #3
 8000652:	1a9b      	subs	r3, r3, r2
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	440b      	add	r3, r1
 8000658:	3306      	adds	r3, #6
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	2200      	movs	r2, #0
 800065e:	4619      	mov	r1, r3
 8000660:	f001 f98c 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][e_], C7SEG_pin[cluster][e_], RESET);
 8000664:	496e      	ldr	r1, [pc, #440]	; (8000820 <display7SEG+0x520>)
 8000666:	683a      	ldr	r2, [r7, #0]
 8000668:	4613      	mov	r3, r2
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	1a9b      	subs	r3, r3, r2
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	440b      	add	r3, r1
 8000672:	3310      	adds	r3, #16
 8000674:	6818      	ldr	r0, [r3, #0]
 8000676:	496b      	ldr	r1, [pc, #428]	; (8000824 <display7SEG+0x524>)
 8000678:	683a      	ldr	r2, [r7, #0]
 800067a:	4613      	mov	r3, r2
 800067c:	00db      	lsls	r3, r3, #3
 800067e:	1a9b      	subs	r3, r3, r2
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	440b      	add	r3, r1
 8000684:	3308      	adds	r3, #8
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	2200      	movs	r2, #0
 800068a:	4619      	mov	r1, r3
 800068c:	f001 f976 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][f_], C7SEG_pin[cluster][f_], SET);
 8000690:	4963      	ldr	r1, [pc, #396]	; (8000820 <display7SEG+0x520>)
 8000692:	683a      	ldr	r2, [r7, #0]
 8000694:	4613      	mov	r3, r2
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	1a9b      	subs	r3, r3, r2
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	440b      	add	r3, r1
 800069e:	3314      	adds	r3, #20
 80006a0:	6818      	ldr	r0, [r3, #0]
 80006a2:	4960      	ldr	r1, [pc, #384]	; (8000824 <display7SEG+0x524>)
 80006a4:	683a      	ldr	r2, [r7, #0]
 80006a6:	4613      	mov	r3, r2
 80006a8:	00db      	lsls	r3, r3, #3
 80006aa:	1a9b      	subs	r3, r3, r2
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	440b      	add	r3, r1
 80006b0:	330a      	adds	r3, #10
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	2201      	movs	r2, #1
 80006b6:	4619      	mov	r1, r3
 80006b8:	f001 f960 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][g_], C7SEG_pin[cluster][g_], RESET);
 80006bc:	4958      	ldr	r1, [pc, #352]	; (8000820 <display7SEG+0x520>)
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	4613      	mov	r3, r2
 80006c2:	00db      	lsls	r3, r3, #3
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	440b      	add	r3, r1
 80006ca:	3318      	adds	r3, #24
 80006cc:	6818      	ldr	r0, [r3, #0]
 80006ce:	4955      	ldr	r1, [pc, #340]	; (8000824 <display7SEG+0x524>)
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	4613      	mov	r3, r2
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	1a9b      	subs	r3, r3, r2
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	440b      	add	r3, r1
 80006dc:	330c      	adds	r3, #12
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	2200      	movs	r2, #0
 80006e2:	4619      	mov	r1, r3
 80006e4:	f001 f94a 	bl	800197c <HAL_GPIO_WritePin>
		break;
 80006e8:	f000 bcd9 	b.w	800109e <display7SEG+0xd9e>
	case 3:
		HAL_GPIO_WritePin(C7SEG_port[cluster][a_], C7SEG_pin[cluster][a_], RESET);
 80006ec:	494c      	ldr	r1, [pc, #304]	; (8000820 <display7SEG+0x520>)
 80006ee:	683a      	ldr	r2, [r7, #0]
 80006f0:	4613      	mov	r3, r2
 80006f2:	00db      	lsls	r3, r3, #3
 80006f4:	1a9b      	subs	r3, r3, r2
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	440b      	add	r3, r1
 80006fa:	6818      	ldr	r0, [r3, #0]
 80006fc:	4949      	ldr	r1, [pc, #292]	; (8000824 <display7SEG+0x524>)
 80006fe:	683a      	ldr	r2, [r7, #0]
 8000700:	4613      	mov	r3, r2
 8000702:	00db      	lsls	r3, r3, #3
 8000704:	1a9b      	subs	r3, r3, r2
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	440b      	add	r3, r1
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	2200      	movs	r2, #0
 800070e:	4619      	mov	r1, r3
 8000710:	f001 f934 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][b_], C7SEG_pin[cluster][b_], RESET);
 8000714:	4942      	ldr	r1, [pc, #264]	; (8000820 <display7SEG+0x520>)
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	4613      	mov	r3, r2
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	1a9b      	subs	r3, r3, r2
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	440b      	add	r3, r1
 8000722:	3304      	adds	r3, #4
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	493f      	ldr	r1, [pc, #252]	; (8000824 <display7SEG+0x524>)
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	4613      	mov	r3, r2
 800072c:	00db      	lsls	r3, r3, #3
 800072e:	1a9b      	subs	r3, r3, r2
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	440b      	add	r3, r1
 8000734:	3302      	adds	r3, #2
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	2200      	movs	r2, #0
 800073a:	4619      	mov	r1, r3
 800073c:	f001 f91e 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][c_], C7SEG_pin[cluster][c_], RESET);
 8000740:	4937      	ldr	r1, [pc, #220]	; (8000820 <display7SEG+0x520>)
 8000742:	683a      	ldr	r2, [r7, #0]
 8000744:	4613      	mov	r3, r2
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	1a9b      	subs	r3, r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	440b      	add	r3, r1
 800074e:	3308      	adds	r3, #8
 8000750:	6818      	ldr	r0, [r3, #0]
 8000752:	4934      	ldr	r1, [pc, #208]	; (8000824 <display7SEG+0x524>)
 8000754:	683a      	ldr	r2, [r7, #0]
 8000756:	4613      	mov	r3, r2
 8000758:	00db      	lsls	r3, r3, #3
 800075a:	1a9b      	subs	r3, r3, r2
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	440b      	add	r3, r1
 8000760:	3304      	adds	r3, #4
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	2200      	movs	r2, #0
 8000766:	4619      	mov	r1, r3
 8000768:	f001 f908 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][d_], C7SEG_pin[cluster][d_], RESET);
 800076c:	492c      	ldr	r1, [pc, #176]	; (8000820 <display7SEG+0x520>)
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	4613      	mov	r3, r2
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	1a9b      	subs	r3, r3, r2
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	440b      	add	r3, r1
 800077a:	330c      	adds	r3, #12
 800077c:	6818      	ldr	r0, [r3, #0]
 800077e:	4929      	ldr	r1, [pc, #164]	; (8000824 <display7SEG+0x524>)
 8000780:	683a      	ldr	r2, [r7, #0]
 8000782:	4613      	mov	r3, r2
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	440b      	add	r3, r1
 800078c:	3306      	adds	r3, #6
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	2200      	movs	r2, #0
 8000792:	4619      	mov	r1, r3
 8000794:	f001 f8f2 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][e_], C7SEG_pin[cluster][e_], SET);
 8000798:	4921      	ldr	r1, [pc, #132]	; (8000820 <display7SEG+0x520>)
 800079a:	683a      	ldr	r2, [r7, #0]
 800079c:	4613      	mov	r3, r2
 800079e:	00db      	lsls	r3, r3, #3
 80007a0:	1a9b      	subs	r3, r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	440b      	add	r3, r1
 80007a6:	3310      	adds	r3, #16
 80007a8:	6818      	ldr	r0, [r3, #0]
 80007aa:	491e      	ldr	r1, [pc, #120]	; (8000824 <display7SEG+0x524>)
 80007ac:	683a      	ldr	r2, [r7, #0]
 80007ae:	4613      	mov	r3, r2
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	440b      	add	r3, r1
 80007b8:	3308      	adds	r3, #8
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	2201      	movs	r2, #1
 80007be:	4619      	mov	r1, r3
 80007c0:	f001 f8dc 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][f_], C7SEG_pin[cluster][f_], SET);
 80007c4:	4916      	ldr	r1, [pc, #88]	; (8000820 <display7SEG+0x520>)
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	4613      	mov	r3, r2
 80007ca:	00db      	lsls	r3, r3, #3
 80007cc:	1a9b      	subs	r3, r3, r2
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	440b      	add	r3, r1
 80007d2:	3314      	adds	r3, #20
 80007d4:	6818      	ldr	r0, [r3, #0]
 80007d6:	4913      	ldr	r1, [pc, #76]	; (8000824 <display7SEG+0x524>)
 80007d8:	683a      	ldr	r2, [r7, #0]
 80007da:	4613      	mov	r3, r2
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	1a9b      	subs	r3, r3, r2
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	440b      	add	r3, r1
 80007e4:	330a      	adds	r3, #10
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	2201      	movs	r2, #1
 80007ea:	4619      	mov	r1, r3
 80007ec:	f001 f8c6 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][g_], C7SEG_pin[cluster][g_], RESET);
 80007f0:	490b      	ldr	r1, [pc, #44]	; (8000820 <display7SEG+0x520>)
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	4613      	mov	r3, r2
 80007f6:	00db      	lsls	r3, r3, #3
 80007f8:	1a9b      	subs	r3, r3, r2
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	440b      	add	r3, r1
 80007fe:	3318      	adds	r3, #24
 8000800:	6818      	ldr	r0, [r3, #0]
 8000802:	4908      	ldr	r1, [pc, #32]	; (8000824 <display7SEG+0x524>)
 8000804:	683a      	ldr	r2, [r7, #0]
 8000806:	4613      	mov	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	1a9b      	subs	r3, r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	440b      	add	r3, r1
 8000810:	330c      	adds	r3, #12
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	2200      	movs	r2, #0
 8000816:	4619      	mov	r1, r3
 8000818:	f001 f8b0 	bl	800197c <HAL_GPIO_WritePin>
		break;
 800081c:	f000 bc3f 	b.w	800109e <display7SEG+0xd9e>
 8000820:	20000024 	.word	0x20000024
 8000824:	2000005c 	.word	0x2000005c
	case 4:
		HAL_GPIO_WritePin(C7SEG_port[cluster][a_], C7SEG_pin[cluster][a_], SET);
 8000828:	4998      	ldr	r1, [pc, #608]	; (8000a8c <display7SEG+0x78c>)
 800082a:	683a      	ldr	r2, [r7, #0]
 800082c:	4613      	mov	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	1a9b      	subs	r3, r3, r2
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	440b      	add	r3, r1
 8000836:	6818      	ldr	r0, [r3, #0]
 8000838:	4995      	ldr	r1, [pc, #596]	; (8000a90 <display7SEG+0x790>)
 800083a:	683a      	ldr	r2, [r7, #0]
 800083c:	4613      	mov	r3, r2
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	1a9b      	subs	r3, r3, r2
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	440b      	add	r3, r1
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	2201      	movs	r2, #1
 800084a:	4619      	mov	r1, r3
 800084c:	f001 f896 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][b_], C7SEG_pin[cluster][b_], RESET);
 8000850:	498e      	ldr	r1, [pc, #568]	; (8000a8c <display7SEG+0x78c>)
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	4613      	mov	r3, r2
 8000856:	00db      	lsls	r3, r3, #3
 8000858:	1a9b      	subs	r3, r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	440b      	add	r3, r1
 800085e:	3304      	adds	r3, #4
 8000860:	6818      	ldr	r0, [r3, #0]
 8000862:	498b      	ldr	r1, [pc, #556]	; (8000a90 <display7SEG+0x790>)
 8000864:	683a      	ldr	r2, [r7, #0]
 8000866:	4613      	mov	r3, r2
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	1a9b      	subs	r3, r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	440b      	add	r3, r1
 8000870:	3302      	adds	r3, #2
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	2200      	movs	r2, #0
 8000876:	4619      	mov	r1, r3
 8000878:	f001 f880 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][c_], C7SEG_pin[cluster][c_], RESET);
 800087c:	4983      	ldr	r1, [pc, #524]	; (8000a8c <display7SEG+0x78c>)
 800087e:	683a      	ldr	r2, [r7, #0]
 8000880:	4613      	mov	r3, r2
 8000882:	00db      	lsls	r3, r3, #3
 8000884:	1a9b      	subs	r3, r3, r2
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	440b      	add	r3, r1
 800088a:	3308      	adds	r3, #8
 800088c:	6818      	ldr	r0, [r3, #0]
 800088e:	4980      	ldr	r1, [pc, #512]	; (8000a90 <display7SEG+0x790>)
 8000890:	683a      	ldr	r2, [r7, #0]
 8000892:	4613      	mov	r3, r2
 8000894:	00db      	lsls	r3, r3, #3
 8000896:	1a9b      	subs	r3, r3, r2
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	440b      	add	r3, r1
 800089c:	3304      	adds	r3, #4
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	2200      	movs	r2, #0
 80008a2:	4619      	mov	r1, r3
 80008a4:	f001 f86a 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][d_], C7SEG_pin[cluster][d_], SET);
 80008a8:	4978      	ldr	r1, [pc, #480]	; (8000a8c <display7SEG+0x78c>)
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	4613      	mov	r3, r2
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	1a9b      	subs	r3, r3, r2
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	440b      	add	r3, r1
 80008b6:	330c      	adds	r3, #12
 80008b8:	6818      	ldr	r0, [r3, #0]
 80008ba:	4975      	ldr	r1, [pc, #468]	; (8000a90 <display7SEG+0x790>)
 80008bc:	683a      	ldr	r2, [r7, #0]
 80008be:	4613      	mov	r3, r2
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	1a9b      	subs	r3, r3, r2
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	440b      	add	r3, r1
 80008c8:	3306      	adds	r3, #6
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	2201      	movs	r2, #1
 80008ce:	4619      	mov	r1, r3
 80008d0:	f001 f854 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][e_], C7SEG_pin[cluster][e_], SET);
 80008d4:	496d      	ldr	r1, [pc, #436]	; (8000a8c <display7SEG+0x78c>)
 80008d6:	683a      	ldr	r2, [r7, #0]
 80008d8:	4613      	mov	r3, r2
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	1a9b      	subs	r3, r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	440b      	add	r3, r1
 80008e2:	3310      	adds	r3, #16
 80008e4:	6818      	ldr	r0, [r3, #0]
 80008e6:	496a      	ldr	r1, [pc, #424]	; (8000a90 <display7SEG+0x790>)
 80008e8:	683a      	ldr	r2, [r7, #0]
 80008ea:	4613      	mov	r3, r2
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	1a9b      	subs	r3, r3, r2
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	440b      	add	r3, r1
 80008f4:	3308      	adds	r3, #8
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	2201      	movs	r2, #1
 80008fa:	4619      	mov	r1, r3
 80008fc:	f001 f83e 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][f_], C7SEG_pin[cluster][f_], RESET);
 8000900:	4962      	ldr	r1, [pc, #392]	; (8000a8c <display7SEG+0x78c>)
 8000902:	683a      	ldr	r2, [r7, #0]
 8000904:	4613      	mov	r3, r2
 8000906:	00db      	lsls	r3, r3, #3
 8000908:	1a9b      	subs	r3, r3, r2
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	440b      	add	r3, r1
 800090e:	3314      	adds	r3, #20
 8000910:	6818      	ldr	r0, [r3, #0]
 8000912:	495f      	ldr	r1, [pc, #380]	; (8000a90 <display7SEG+0x790>)
 8000914:	683a      	ldr	r2, [r7, #0]
 8000916:	4613      	mov	r3, r2
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	1a9b      	subs	r3, r3, r2
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	440b      	add	r3, r1
 8000920:	330a      	adds	r3, #10
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	2200      	movs	r2, #0
 8000926:	4619      	mov	r1, r3
 8000928:	f001 f828 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][g_], C7SEG_pin[cluster][g_], RESET);
 800092c:	4957      	ldr	r1, [pc, #348]	; (8000a8c <display7SEG+0x78c>)
 800092e:	683a      	ldr	r2, [r7, #0]
 8000930:	4613      	mov	r3, r2
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	1a9b      	subs	r3, r3, r2
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	440b      	add	r3, r1
 800093a:	3318      	adds	r3, #24
 800093c:	6818      	ldr	r0, [r3, #0]
 800093e:	4954      	ldr	r1, [pc, #336]	; (8000a90 <display7SEG+0x790>)
 8000940:	683a      	ldr	r2, [r7, #0]
 8000942:	4613      	mov	r3, r2
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	1a9b      	subs	r3, r3, r2
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	440b      	add	r3, r1
 800094c:	330c      	adds	r3, #12
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	2200      	movs	r2, #0
 8000952:	4619      	mov	r1, r3
 8000954:	f001 f812 	bl	800197c <HAL_GPIO_WritePin>
		break;
 8000958:	e3a1      	b.n	800109e <display7SEG+0xd9e>
	case 5:
		HAL_GPIO_WritePin(C7SEG_port[cluster][a_], C7SEG_pin[cluster][a_], RESET);
 800095a:	494c      	ldr	r1, [pc, #304]	; (8000a8c <display7SEG+0x78c>)
 800095c:	683a      	ldr	r2, [r7, #0]
 800095e:	4613      	mov	r3, r2
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	1a9b      	subs	r3, r3, r2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	440b      	add	r3, r1
 8000968:	6818      	ldr	r0, [r3, #0]
 800096a:	4949      	ldr	r1, [pc, #292]	; (8000a90 <display7SEG+0x790>)
 800096c:	683a      	ldr	r2, [r7, #0]
 800096e:	4613      	mov	r3, r2
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	1a9b      	subs	r3, r3, r2
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	440b      	add	r3, r1
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	2200      	movs	r2, #0
 800097c:	4619      	mov	r1, r3
 800097e:	f000 fffd 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][b_], C7SEG_pin[cluster][b_], SET);
 8000982:	4942      	ldr	r1, [pc, #264]	; (8000a8c <display7SEG+0x78c>)
 8000984:	683a      	ldr	r2, [r7, #0]
 8000986:	4613      	mov	r3, r2
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	1a9b      	subs	r3, r3, r2
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	440b      	add	r3, r1
 8000990:	3304      	adds	r3, #4
 8000992:	6818      	ldr	r0, [r3, #0]
 8000994:	493e      	ldr	r1, [pc, #248]	; (8000a90 <display7SEG+0x790>)
 8000996:	683a      	ldr	r2, [r7, #0]
 8000998:	4613      	mov	r3, r2
 800099a:	00db      	lsls	r3, r3, #3
 800099c:	1a9b      	subs	r3, r3, r2
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	440b      	add	r3, r1
 80009a2:	3302      	adds	r3, #2
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	2201      	movs	r2, #1
 80009a8:	4619      	mov	r1, r3
 80009aa:	f000 ffe7 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][c_], C7SEG_pin[cluster][c_], RESET);
 80009ae:	4937      	ldr	r1, [pc, #220]	; (8000a8c <display7SEG+0x78c>)
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	4613      	mov	r3, r2
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	1a9b      	subs	r3, r3, r2
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	440b      	add	r3, r1
 80009bc:	3308      	adds	r3, #8
 80009be:	6818      	ldr	r0, [r3, #0]
 80009c0:	4933      	ldr	r1, [pc, #204]	; (8000a90 <display7SEG+0x790>)
 80009c2:	683a      	ldr	r2, [r7, #0]
 80009c4:	4613      	mov	r3, r2
 80009c6:	00db      	lsls	r3, r3, #3
 80009c8:	1a9b      	subs	r3, r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	440b      	add	r3, r1
 80009ce:	3304      	adds	r3, #4
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	2200      	movs	r2, #0
 80009d4:	4619      	mov	r1, r3
 80009d6:	f000 ffd1 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][d_], C7SEG_pin[cluster][d_], RESET);
 80009da:	492c      	ldr	r1, [pc, #176]	; (8000a8c <display7SEG+0x78c>)
 80009dc:	683a      	ldr	r2, [r7, #0]
 80009de:	4613      	mov	r3, r2
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	1a9b      	subs	r3, r3, r2
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	440b      	add	r3, r1
 80009e8:	330c      	adds	r3, #12
 80009ea:	6818      	ldr	r0, [r3, #0]
 80009ec:	4928      	ldr	r1, [pc, #160]	; (8000a90 <display7SEG+0x790>)
 80009ee:	683a      	ldr	r2, [r7, #0]
 80009f0:	4613      	mov	r3, r2
 80009f2:	00db      	lsls	r3, r3, #3
 80009f4:	1a9b      	subs	r3, r3, r2
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	440b      	add	r3, r1
 80009fa:	3306      	adds	r3, #6
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	2200      	movs	r2, #0
 8000a00:	4619      	mov	r1, r3
 8000a02:	f000 ffbb 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][e_], C7SEG_pin[cluster][e_], SET);
 8000a06:	4921      	ldr	r1, [pc, #132]	; (8000a8c <display7SEG+0x78c>)
 8000a08:	683a      	ldr	r2, [r7, #0]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	1a9b      	subs	r3, r3, r2
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	440b      	add	r3, r1
 8000a14:	3310      	adds	r3, #16
 8000a16:	6818      	ldr	r0, [r3, #0]
 8000a18:	491d      	ldr	r1, [pc, #116]	; (8000a90 <display7SEG+0x790>)
 8000a1a:	683a      	ldr	r2, [r7, #0]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	00db      	lsls	r3, r3, #3
 8000a20:	1a9b      	subs	r3, r3, r2
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	440b      	add	r3, r1
 8000a26:	3308      	adds	r3, #8
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f000 ffa5 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][f_], C7SEG_pin[cluster][f_], RESET);
 8000a32:	4916      	ldr	r1, [pc, #88]	; (8000a8c <display7SEG+0x78c>)
 8000a34:	683a      	ldr	r2, [r7, #0]
 8000a36:	4613      	mov	r3, r2
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	1a9b      	subs	r3, r3, r2
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	440b      	add	r3, r1
 8000a40:	3314      	adds	r3, #20
 8000a42:	6818      	ldr	r0, [r3, #0]
 8000a44:	4912      	ldr	r1, [pc, #72]	; (8000a90 <display7SEG+0x790>)
 8000a46:	683a      	ldr	r2, [r7, #0]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	1a9b      	subs	r3, r3, r2
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	440b      	add	r3, r1
 8000a52:	330a      	adds	r3, #10
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	2200      	movs	r2, #0
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f000 ff8f 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][g_], C7SEG_pin[cluster][g_], RESET);
 8000a5e:	490b      	ldr	r1, [pc, #44]	; (8000a8c <display7SEG+0x78c>)
 8000a60:	683a      	ldr	r2, [r7, #0]
 8000a62:	4613      	mov	r3, r2
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	1a9b      	subs	r3, r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	3318      	adds	r3, #24
 8000a6e:	6818      	ldr	r0, [r3, #0]
 8000a70:	4907      	ldr	r1, [pc, #28]	; (8000a90 <display7SEG+0x790>)
 8000a72:	683a      	ldr	r2, [r7, #0]
 8000a74:	4613      	mov	r3, r2
 8000a76:	00db      	lsls	r3, r3, #3
 8000a78:	1a9b      	subs	r3, r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	440b      	add	r3, r1
 8000a7e:	330c      	adds	r3, #12
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	2200      	movs	r2, #0
 8000a84:	4619      	mov	r1, r3
 8000a86:	f000 ff79 	bl	800197c <HAL_GPIO_WritePin>
		break;
 8000a8a:	e308      	b.n	800109e <display7SEG+0xd9e>
 8000a8c:	20000024 	.word	0x20000024
 8000a90:	2000005c 	.word	0x2000005c
	case 6:
		HAL_GPIO_WritePin(C7SEG_port[cluster][a_], C7SEG_pin[cluster][a_], RESET);
 8000a94:	4998      	ldr	r1, [pc, #608]	; (8000cf8 <display7SEG+0x9f8>)
 8000a96:	683a      	ldr	r2, [r7, #0]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	00db      	lsls	r3, r3, #3
 8000a9c:	1a9b      	subs	r3, r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	440b      	add	r3, r1
 8000aa2:	6818      	ldr	r0, [r3, #0]
 8000aa4:	4995      	ldr	r1, [pc, #596]	; (8000cfc <display7SEG+0x9fc>)
 8000aa6:	683a      	ldr	r2, [r7, #0]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	00db      	lsls	r3, r3, #3
 8000aac:	1a9b      	subs	r3, r3, r2
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	440b      	add	r3, r1
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f000 ff60 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][b_], C7SEG_pin[cluster][b_], SET);
 8000abc:	498e      	ldr	r1, [pc, #568]	; (8000cf8 <display7SEG+0x9f8>)
 8000abe:	683a      	ldr	r2, [r7, #0]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	00db      	lsls	r3, r3, #3
 8000ac4:	1a9b      	subs	r3, r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	440b      	add	r3, r1
 8000aca:	3304      	adds	r3, #4
 8000acc:	6818      	ldr	r0, [r3, #0]
 8000ace:	498b      	ldr	r1, [pc, #556]	; (8000cfc <display7SEG+0x9fc>)
 8000ad0:	683a      	ldr	r2, [r7, #0]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	1a9b      	subs	r3, r3, r2
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	440b      	add	r3, r1
 8000adc:	3302      	adds	r3, #2
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f000 ff4a 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][c_], C7SEG_pin[cluster][c_], RESET);
 8000ae8:	4983      	ldr	r1, [pc, #524]	; (8000cf8 <display7SEG+0x9f8>)
 8000aea:	683a      	ldr	r2, [r7, #0]
 8000aec:	4613      	mov	r3, r2
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	1a9b      	subs	r3, r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	440b      	add	r3, r1
 8000af6:	3308      	adds	r3, #8
 8000af8:	6818      	ldr	r0, [r3, #0]
 8000afa:	4980      	ldr	r1, [pc, #512]	; (8000cfc <display7SEG+0x9fc>)
 8000afc:	683a      	ldr	r2, [r7, #0]
 8000afe:	4613      	mov	r3, r2
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	1a9b      	subs	r3, r3, r2
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	440b      	add	r3, r1
 8000b08:	3304      	adds	r3, #4
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f000 ff34 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][d_], C7SEG_pin[cluster][d_], RESET);
 8000b14:	4978      	ldr	r1, [pc, #480]	; (8000cf8 <display7SEG+0x9f8>)
 8000b16:	683a      	ldr	r2, [r7, #0]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	00db      	lsls	r3, r3, #3
 8000b1c:	1a9b      	subs	r3, r3, r2
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	440b      	add	r3, r1
 8000b22:	330c      	adds	r3, #12
 8000b24:	6818      	ldr	r0, [r3, #0]
 8000b26:	4975      	ldr	r1, [pc, #468]	; (8000cfc <display7SEG+0x9fc>)
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	1a9b      	subs	r3, r3, r2
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	440b      	add	r3, r1
 8000b34:	3306      	adds	r3, #6
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	f000 ff1e 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][e_], C7SEG_pin[cluster][e_], RESET);
 8000b40:	496d      	ldr	r1, [pc, #436]	; (8000cf8 <display7SEG+0x9f8>)
 8000b42:	683a      	ldr	r2, [r7, #0]
 8000b44:	4613      	mov	r3, r2
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	1a9b      	subs	r3, r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	3310      	adds	r3, #16
 8000b50:	6818      	ldr	r0, [r3, #0]
 8000b52:	496a      	ldr	r1, [pc, #424]	; (8000cfc <display7SEG+0x9fc>)
 8000b54:	683a      	ldr	r2, [r7, #0]
 8000b56:	4613      	mov	r3, r2
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	1a9b      	subs	r3, r3, r2
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	440b      	add	r3, r1
 8000b60:	3308      	adds	r3, #8
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	2200      	movs	r2, #0
 8000b66:	4619      	mov	r1, r3
 8000b68:	f000 ff08 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][f_], C7SEG_pin[cluster][f_], RESET);
 8000b6c:	4962      	ldr	r1, [pc, #392]	; (8000cf8 <display7SEG+0x9f8>)
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	4613      	mov	r3, r2
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	1a9b      	subs	r3, r3, r2
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	440b      	add	r3, r1
 8000b7a:	3314      	adds	r3, #20
 8000b7c:	6818      	ldr	r0, [r3, #0]
 8000b7e:	495f      	ldr	r1, [pc, #380]	; (8000cfc <display7SEG+0x9fc>)
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	4613      	mov	r3, r2
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	1a9b      	subs	r3, r3, r2
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	440b      	add	r3, r1
 8000b8c:	330a      	adds	r3, #10
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	2200      	movs	r2, #0
 8000b92:	4619      	mov	r1, r3
 8000b94:	f000 fef2 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][g_], C7SEG_pin[cluster][g_], RESET);
 8000b98:	4957      	ldr	r1, [pc, #348]	; (8000cf8 <display7SEG+0x9f8>)
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	1a9b      	subs	r3, r3, r2
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	3318      	adds	r3, #24
 8000ba8:	6818      	ldr	r0, [r3, #0]
 8000baa:	4954      	ldr	r1, [pc, #336]	; (8000cfc <display7SEG+0x9fc>)
 8000bac:	683a      	ldr	r2, [r7, #0]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	1a9b      	subs	r3, r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	440b      	add	r3, r1
 8000bb8:	330c      	adds	r3, #12
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f000 fedc 	bl	800197c <HAL_GPIO_WritePin>
		break;
 8000bc4:	e26b      	b.n	800109e <display7SEG+0xd9e>
	case 7:
		HAL_GPIO_WritePin(C7SEG_port[cluster][a_], C7SEG_pin[cluster][a_], RESET);
 8000bc6:	494c      	ldr	r1, [pc, #304]	; (8000cf8 <display7SEG+0x9f8>)
 8000bc8:	683a      	ldr	r2, [r7, #0]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	1a9b      	subs	r3, r3, r2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	6818      	ldr	r0, [r3, #0]
 8000bd6:	4949      	ldr	r1, [pc, #292]	; (8000cfc <display7SEG+0x9fc>)
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	1a9b      	subs	r3, r3, r2
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	440b      	add	r3, r1
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	2200      	movs	r2, #0
 8000be8:	4619      	mov	r1, r3
 8000bea:	f000 fec7 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][b_], C7SEG_pin[cluster][b_], RESET);
 8000bee:	4942      	ldr	r1, [pc, #264]	; (8000cf8 <display7SEG+0x9f8>)
 8000bf0:	683a      	ldr	r2, [r7, #0]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	1a9b      	subs	r3, r3, r2
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	6818      	ldr	r0, [r3, #0]
 8000c00:	493e      	ldr	r1, [pc, #248]	; (8000cfc <display7SEG+0x9fc>)
 8000c02:	683a      	ldr	r2, [r7, #0]
 8000c04:	4613      	mov	r3, r2
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	1a9b      	subs	r3, r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	440b      	add	r3, r1
 8000c0e:	3302      	adds	r3, #2
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	2200      	movs	r2, #0
 8000c14:	4619      	mov	r1, r3
 8000c16:	f000 feb1 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][c_], C7SEG_pin[cluster][c_], RESET);
 8000c1a:	4937      	ldr	r1, [pc, #220]	; (8000cf8 <display7SEG+0x9f8>)
 8000c1c:	683a      	ldr	r2, [r7, #0]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	1a9b      	subs	r3, r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	440b      	add	r3, r1
 8000c28:	3308      	adds	r3, #8
 8000c2a:	6818      	ldr	r0, [r3, #0]
 8000c2c:	4933      	ldr	r1, [pc, #204]	; (8000cfc <display7SEG+0x9fc>)
 8000c2e:	683a      	ldr	r2, [r7, #0]
 8000c30:	4613      	mov	r3, r2
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	1a9b      	subs	r3, r3, r2
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	440b      	add	r3, r1
 8000c3a:	3304      	adds	r3, #4
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	4619      	mov	r1, r3
 8000c42:	f000 fe9b 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][d_], C7SEG_pin[cluster][d_], SET);
 8000c46:	492c      	ldr	r1, [pc, #176]	; (8000cf8 <display7SEG+0x9f8>)
 8000c48:	683a      	ldr	r2, [r7, #0]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	1a9b      	subs	r3, r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	440b      	add	r3, r1
 8000c54:	330c      	adds	r3, #12
 8000c56:	6818      	ldr	r0, [r3, #0]
 8000c58:	4928      	ldr	r1, [pc, #160]	; (8000cfc <display7SEG+0x9fc>)
 8000c5a:	683a      	ldr	r2, [r7, #0]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	1a9b      	subs	r3, r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	440b      	add	r3, r1
 8000c66:	3306      	adds	r3, #6
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f000 fe85 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][e_], C7SEG_pin[cluster][e_], SET);
 8000c72:	4921      	ldr	r1, [pc, #132]	; (8000cf8 <display7SEG+0x9f8>)
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	4613      	mov	r3, r2
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	1a9b      	subs	r3, r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	440b      	add	r3, r1
 8000c80:	3310      	adds	r3, #16
 8000c82:	6818      	ldr	r0, [r3, #0]
 8000c84:	491d      	ldr	r1, [pc, #116]	; (8000cfc <display7SEG+0x9fc>)
 8000c86:	683a      	ldr	r2, [r7, #0]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	00db      	lsls	r3, r3, #3
 8000c8c:	1a9b      	subs	r3, r3, r2
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	440b      	add	r3, r1
 8000c92:	3308      	adds	r3, #8
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	2201      	movs	r2, #1
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f000 fe6f 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][f_], C7SEG_pin[cluster][f_], SET);
 8000c9e:	4916      	ldr	r1, [pc, #88]	; (8000cf8 <display7SEG+0x9f8>)
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	1a9b      	subs	r3, r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	440b      	add	r3, r1
 8000cac:	3314      	adds	r3, #20
 8000cae:	6818      	ldr	r0, [r3, #0]
 8000cb0:	4912      	ldr	r1, [pc, #72]	; (8000cfc <display7SEG+0x9fc>)
 8000cb2:	683a      	ldr	r2, [r7, #0]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	1a9b      	subs	r3, r3, r2
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	440b      	add	r3, r1
 8000cbe:	330a      	adds	r3, #10
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f000 fe59 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][g_], C7SEG_pin[cluster][g_], SET);
 8000cca:	490b      	ldr	r1, [pc, #44]	; (8000cf8 <display7SEG+0x9f8>)
 8000ccc:	683a      	ldr	r2, [r7, #0]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	1a9b      	subs	r3, r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	3318      	adds	r3, #24
 8000cda:	6818      	ldr	r0, [r3, #0]
 8000cdc:	4907      	ldr	r1, [pc, #28]	; (8000cfc <display7SEG+0x9fc>)
 8000cde:	683a      	ldr	r2, [r7, #0]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	1a9b      	subs	r3, r3, r2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	440b      	add	r3, r1
 8000cea:	330c      	adds	r3, #12
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f000 fe43 	bl	800197c <HAL_GPIO_WritePin>
		break;
 8000cf6:	e1d2      	b.n	800109e <display7SEG+0xd9e>
 8000cf8:	20000024 	.word	0x20000024
 8000cfc:	2000005c 	.word	0x2000005c
	case 8:
		HAL_GPIO_WritePin(C7SEG_port[cluster][a_], C7SEG_pin[cluster][a_], RESET);
 8000d00:	4998      	ldr	r1, [pc, #608]	; (8000f64 <display7SEG+0xc64>)
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	4613      	mov	r3, r2
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	1a9b      	subs	r3, r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	6818      	ldr	r0, [r3, #0]
 8000d10:	4995      	ldr	r1, [pc, #596]	; (8000f68 <display7SEG+0xc68>)
 8000d12:	683a      	ldr	r2, [r7, #0]
 8000d14:	4613      	mov	r3, r2
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	1a9b      	subs	r3, r3, r2
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	440b      	add	r3, r1
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	2200      	movs	r2, #0
 8000d22:	4619      	mov	r1, r3
 8000d24:	f000 fe2a 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][b_], C7SEG_pin[cluster][b_], RESET);
 8000d28:	498e      	ldr	r1, [pc, #568]	; (8000f64 <display7SEG+0xc64>)
 8000d2a:	683a      	ldr	r2, [r7, #0]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	1a9b      	subs	r3, r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	440b      	add	r3, r1
 8000d36:	3304      	adds	r3, #4
 8000d38:	6818      	ldr	r0, [r3, #0]
 8000d3a:	498b      	ldr	r1, [pc, #556]	; (8000f68 <display7SEG+0xc68>)
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	440b      	add	r3, r1
 8000d48:	3302      	adds	r3, #2
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f000 fe14 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][c_], C7SEG_pin[cluster][c_], RESET);
 8000d54:	4983      	ldr	r1, [pc, #524]	; (8000f64 <display7SEG+0xc64>)
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	1a9b      	subs	r3, r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	440b      	add	r3, r1
 8000d62:	3308      	adds	r3, #8
 8000d64:	6818      	ldr	r0, [r3, #0]
 8000d66:	4980      	ldr	r1, [pc, #512]	; (8000f68 <display7SEG+0xc68>)
 8000d68:	683a      	ldr	r2, [r7, #0]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	1a9b      	subs	r3, r3, r2
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	440b      	add	r3, r1
 8000d74:	3304      	adds	r3, #4
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f000 fdfe 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][d_], C7SEG_pin[cluster][d_], RESET);
 8000d80:	4978      	ldr	r1, [pc, #480]	; (8000f64 <display7SEG+0xc64>)
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	4613      	mov	r3, r2
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	1a9b      	subs	r3, r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	330c      	adds	r3, #12
 8000d90:	6818      	ldr	r0, [r3, #0]
 8000d92:	4975      	ldr	r1, [pc, #468]	; (8000f68 <display7SEG+0xc68>)
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	4613      	mov	r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	1a9b      	subs	r3, r3, r2
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	440b      	add	r3, r1
 8000da0:	3306      	adds	r3, #6
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	2200      	movs	r2, #0
 8000da6:	4619      	mov	r1, r3
 8000da8:	f000 fde8 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][e_], C7SEG_pin[cluster][e_], RESET);
 8000dac:	496d      	ldr	r1, [pc, #436]	; (8000f64 <display7SEG+0xc64>)
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	4613      	mov	r3, r2
 8000db2:	00db      	lsls	r3, r3, #3
 8000db4:	1a9b      	subs	r3, r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	440b      	add	r3, r1
 8000dba:	3310      	adds	r3, #16
 8000dbc:	6818      	ldr	r0, [r3, #0]
 8000dbe:	496a      	ldr	r1, [pc, #424]	; (8000f68 <display7SEG+0xc68>)
 8000dc0:	683a      	ldr	r2, [r7, #0]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	1a9b      	subs	r3, r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	440b      	add	r3, r1
 8000dcc:	3308      	adds	r3, #8
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f000 fdd2 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][f_], C7SEG_pin[cluster][f_], RESET);
 8000dd8:	4962      	ldr	r1, [pc, #392]	; (8000f64 <display7SEG+0xc64>)
 8000dda:	683a      	ldr	r2, [r7, #0]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	1a9b      	subs	r3, r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	440b      	add	r3, r1
 8000de6:	3314      	adds	r3, #20
 8000de8:	6818      	ldr	r0, [r3, #0]
 8000dea:	495f      	ldr	r1, [pc, #380]	; (8000f68 <display7SEG+0xc68>)
 8000dec:	683a      	ldr	r2, [r7, #0]
 8000dee:	4613      	mov	r3, r2
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	1a9b      	subs	r3, r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	440b      	add	r3, r1
 8000df8:	330a      	adds	r3, #10
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f000 fdbc 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][g_], C7SEG_pin[cluster][g_], RESET);
 8000e04:	4957      	ldr	r1, [pc, #348]	; (8000f64 <display7SEG+0xc64>)
 8000e06:	683a      	ldr	r2, [r7, #0]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	1a9b      	subs	r3, r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	440b      	add	r3, r1
 8000e12:	3318      	adds	r3, #24
 8000e14:	6818      	ldr	r0, [r3, #0]
 8000e16:	4954      	ldr	r1, [pc, #336]	; (8000f68 <display7SEG+0xc68>)
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	1a9b      	subs	r3, r3, r2
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	440b      	add	r3, r1
 8000e24:	330c      	adds	r3, #12
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f000 fda6 	bl	800197c <HAL_GPIO_WritePin>
		break;
 8000e30:	e135      	b.n	800109e <display7SEG+0xd9e>
	case 9:
		HAL_GPIO_WritePin(C7SEG_port[cluster][a_], C7SEG_pin[cluster][a_], RESET);
 8000e32:	494c      	ldr	r1, [pc, #304]	; (8000f64 <display7SEG+0xc64>)
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	4613      	mov	r3, r2
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	1a9b      	subs	r3, r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	440b      	add	r3, r1
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	4949      	ldr	r1, [pc, #292]	; (8000f68 <display7SEG+0xc68>)
 8000e44:	683a      	ldr	r2, [r7, #0]
 8000e46:	4613      	mov	r3, r2
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	1a9b      	subs	r3, r3, r2
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	440b      	add	r3, r1
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	2200      	movs	r2, #0
 8000e54:	4619      	mov	r1, r3
 8000e56:	f000 fd91 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][b_], C7SEG_pin[cluster][b_], RESET);
 8000e5a:	4942      	ldr	r1, [pc, #264]	; (8000f64 <display7SEG+0xc64>)
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	440b      	add	r3, r1
 8000e68:	3304      	adds	r3, #4
 8000e6a:	6818      	ldr	r0, [r3, #0]
 8000e6c:	493e      	ldr	r1, [pc, #248]	; (8000f68 <display7SEG+0xc68>)
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	4613      	mov	r3, r2
 8000e72:	00db      	lsls	r3, r3, #3
 8000e74:	1a9b      	subs	r3, r3, r2
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	440b      	add	r3, r1
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4619      	mov	r1, r3
 8000e82:	f000 fd7b 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][c_], C7SEG_pin[cluster][c_], RESET);
 8000e86:	4937      	ldr	r1, [pc, #220]	; (8000f64 <display7SEG+0xc64>)
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	1a9b      	subs	r3, r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	440b      	add	r3, r1
 8000e94:	3308      	adds	r3, #8
 8000e96:	6818      	ldr	r0, [r3, #0]
 8000e98:	4933      	ldr	r1, [pc, #204]	; (8000f68 <display7SEG+0xc68>)
 8000e9a:	683a      	ldr	r2, [r7, #0]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	1a9b      	subs	r3, r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	440b      	add	r3, r1
 8000ea6:	3304      	adds	r3, #4
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4619      	mov	r1, r3
 8000eae:	f000 fd65 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][d_], C7SEG_pin[cluster][d_], RESET);
 8000eb2:	492c      	ldr	r1, [pc, #176]	; (8000f64 <display7SEG+0xc64>)
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	1a9b      	subs	r3, r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	330c      	adds	r3, #12
 8000ec2:	6818      	ldr	r0, [r3, #0]
 8000ec4:	4928      	ldr	r1, [pc, #160]	; (8000f68 <display7SEG+0xc68>)
 8000ec6:	683a      	ldr	r2, [r7, #0]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	00db      	lsls	r3, r3, #3
 8000ecc:	1a9b      	subs	r3, r3, r2
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	440b      	add	r3, r1
 8000ed2:	3306      	adds	r3, #6
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f000 fd4f 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][e_], C7SEG_pin[cluster][e_], SET);
 8000ede:	4921      	ldr	r1, [pc, #132]	; (8000f64 <display7SEG+0xc64>)
 8000ee0:	683a      	ldr	r2, [r7, #0]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	1a9b      	subs	r3, r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	440b      	add	r3, r1
 8000eec:	3310      	adds	r3, #16
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	491d      	ldr	r1, [pc, #116]	; (8000f68 <display7SEG+0xc68>)
 8000ef2:	683a      	ldr	r2, [r7, #0]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	1a9b      	subs	r3, r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	440b      	add	r3, r1
 8000efe:	3308      	adds	r3, #8
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	2201      	movs	r2, #1
 8000f04:	4619      	mov	r1, r3
 8000f06:	f000 fd39 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][f_], C7SEG_pin[cluster][f_], RESET);
 8000f0a:	4916      	ldr	r1, [pc, #88]	; (8000f64 <display7SEG+0xc64>)
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	1a9b      	subs	r3, r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	440b      	add	r3, r1
 8000f18:	3314      	adds	r3, #20
 8000f1a:	6818      	ldr	r0, [r3, #0]
 8000f1c:	4912      	ldr	r1, [pc, #72]	; (8000f68 <display7SEG+0xc68>)
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	4613      	mov	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	1a9b      	subs	r3, r3, r2
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	440b      	add	r3, r1
 8000f2a:	330a      	adds	r3, #10
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	4619      	mov	r1, r3
 8000f32:	f000 fd23 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][g_], C7SEG_pin[cluster][g_], RESET);
 8000f36:	490b      	ldr	r1, [pc, #44]	; (8000f64 <display7SEG+0xc64>)
 8000f38:	683a      	ldr	r2, [r7, #0]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	1a9b      	subs	r3, r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	440b      	add	r3, r1
 8000f44:	3318      	adds	r3, #24
 8000f46:	6818      	ldr	r0, [r3, #0]
 8000f48:	4907      	ldr	r1, [pc, #28]	; (8000f68 <display7SEG+0xc68>)
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	1a9b      	subs	r3, r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	440b      	add	r3, r1
 8000f56:	330c      	adds	r3, #12
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f000 fd0d 	bl	800197c <HAL_GPIO_WritePin>
		break;
 8000f62:	e09c      	b.n	800109e <display7SEG+0xd9e>
 8000f64:	20000024 	.word	0x20000024
 8000f68:	2000005c 	.word	0x2000005c
	default:
		HAL_GPIO_WritePin(C7SEG_port[cluster][a_], C7SEG_pin[cluster][a_], RESET);
 8000f6c:	494e      	ldr	r1, [pc, #312]	; (80010a8 <display7SEG+0xda8>)
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	4613      	mov	r3, r2
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	1a9b      	subs	r3, r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	440b      	add	r3, r1
 8000f7a:	6818      	ldr	r0, [r3, #0]
 8000f7c:	494b      	ldr	r1, [pc, #300]	; (80010ac <display7SEG+0xdac>)
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	4613      	mov	r3, r2
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	1a9b      	subs	r3, r3, r2
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	440b      	add	r3, r1
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f000 fcf4 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][b_], C7SEG_pin[cluster][b_], SET);
 8000f94:	4944      	ldr	r1, [pc, #272]	; (80010a8 <display7SEG+0xda8>)
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	1a9b      	subs	r3, r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	6818      	ldr	r0, [r3, #0]
 8000fa6:	4941      	ldr	r1, [pc, #260]	; (80010ac <display7SEG+0xdac>)
 8000fa8:	683a      	ldr	r2, [r7, #0]
 8000faa:	4613      	mov	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	1a9b      	subs	r3, r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	440b      	add	r3, r1
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f000 fcde 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][c_], C7SEG_pin[cluster][c_], SET);
 8000fc0:	4939      	ldr	r1, [pc, #228]	; (80010a8 <display7SEG+0xda8>)
 8000fc2:	683a      	ldr	r2, [r7, #0]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	1a9b      	subs	r3, r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	440b      	add	r3, r1
 8000fce:	3308      	adds	r3, #8
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	4936      	ldr	r1, [pc, #216]	; (80010ac <display7SEG+0xdac>)
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	1a9b      	subs	r3, r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	440b      	add	r3, r1
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f000 fcc8 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][d_], C7SEG_pin[cluster][d_], RESET);
 8000fec:	492e      	ldr	r1, [pc, #184]	; (80010a8 <display7SEG+0xda8>)
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	1a9b      	subs	r3, r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	330c      	adds	r3, #12
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	492b      	ldr	r1, [pc, #172]	; (80010ac <display7SEG+0xdac>)
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	4613      	mov	r3, r2
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	1a9b      	subs	r3, r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	440b      	add	r3, r1
 800100c:	3306      	adds	r3, #6
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	2200      	movs	r2, #0
 8001012:	4619      	mov	r1, r3
 8001014:	f000 fcb2 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][e_], C7SEG_pin[cluster][e_], RESET);
 8001018:	4923      	ldr	r1, [pc, #140]	; (80010a8 <display7SEG+0xda8>)
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	4613      	mov	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	1a9b      	subs	r3, r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	440b      	add	r3, r1
 8001026:	3310      	adds	r3, #16
 8001028:	6818      	ldr	r0, [r3, #0]
 800102a:	4920      	ldr	r1, [pc, #128]	; (80010ac <display7SEG+0xdac>)
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	4613      	mov	r3, r2
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	1a9b      	subs	r3, r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	440b      	add	r3, r1
 8001038:	3308      	adds	r3, #8
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	2200      	movs	r2, #0
 800103e:	4619      	mov	r1, r3
 8001040:	f000 fc9c 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][f_], C7SEG_pin[cluster][f_], RESET);
 8001044:	4918      	ldr	r1, [pc, #96]	; (80010a8 <display7SEG+0xda8>)
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	4613      	mov	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	1a9b      	subs	r3, r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	3314      	adds	r3, #20
 8001054:	6818      	ldr	r0, [r3, #0]
 8001056:	4915      	ldr	r1, [pc, #84]	; (80010ac <display7SEG+0xdac>)
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	4613      	mov	r3, r2
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	1a9b      	subs	r3, r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	440b      	add	r3, r1
 8001064:	330a      	adds	r3, #10
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	2200      	movs	r2, #0
 800106a:	4619      	mov	r1, r3
 800106c:	f000 fc86 	bl	800197c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C7SEG_port[cluster][g_], C7SEG_pin[cluster][g_], RESET);
 8001070:	490d      	ldr	r1, [pc, #52]	; (80010a8 <display7SEG+0xda8>)
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	4613      	mov	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	1a9b      	subs	r3, r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	3318      	adds	r3, #24
 8001080:	6818      	ldr	r0, [r3, #0]
 8001082:	490a      	ldr	r1, [pc, #40]	; (80010ac <display7SEG+0xdac>)
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	4613      	mov	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	1a9b      	subs	r3, r3, r2
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	440b      	add	r3, r1
 8001090:	330c      	adds	r3, #12
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	2200      	movs	r2, #0
 8001096:	4619      	mov	r1, r3
 8001098:	f000 fc70 	bl	800197c <HAL_GPIO_WritePin>
	}
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000024 	.word	0x20000024
 80010ac:	2000005c 	.word	0x2000005c

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	enum state current = RED1_GREEN2;
 80010b6:	2300      	movs	r3, #0
 80010b8:	73fb      	strb	r3, [r7, #15]
	int timer_counter_1 = red_counter;
 80010ba:	2305      	movs	r3, #5
 80010bc:	60bb      	str	r3, [r7, #8]
	int timer_counter_2 = green_counter;
 80010be:	2303      	movs	r3, #3
 80010c0:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c2:	f000 f975 	bl	80013b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c6:	f000 f868 	bl	800119a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ca:	f000 f8a1 	bl	8001210 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  on_light(red, 1);
 80010ce:	2101      	movs	r1, #1
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff f83b 	bl	800014c <on_light>
  on_light(green, 2);
 80010d6:	2102      	movs	r1, #2
 80010d8:	2002      	movs	r0, #2
 80010da:	f7ff f837 	bl	800014c <on_light>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (current)
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d024      	beq.n	800112e <main+0x7e>
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	dc2e      	bgt.n	8001146 <main+0x96>
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d002      	beq.n	80010f2 <main+0x42>
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d00c      	beq.n	800110a <main+0x5a>
 80010f0:	e029      	b.n	8001146 <main+0x96>
	  {
	  case RED1_GREEN2:
		  if(timer_counter_2 <= 0)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	dc38      	bgt.n	800116a <main+0xba>
		  {
			  current = RED1_YELLOW2;
 80010f8:	2301      	movs	r3, #1
 80010fa:	73fb      	strb	r3, [r7, #15]
			  on_light(yellow, 2);
 80010fc:	2102      	movs	r1, #2
 80010fe:	2001      	movs	r0, #1
 8001100:	f7ff f824 	bl	800014c <on_light>
			  timer_counter_2 = yellow_counter;
 8001104:	2302      	movs	r3, #2
 8001106:	607b      	str	r3, [r7, #4]
		  }
		  break;
 8001108:	e02f      	b.n	800116a <main+0xba>
	  case RED1_YELLOW2:
		  if(timer_counter_2 <= 0)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	dc2e      	bgt.n	800116e <main+0xbe>
		  {
			  current = GREEN1_RED2;
 8001110:	2302      	movs	r3, #2
 8001112:	73fb      	strb	r3, [r7, #15]
			  on_light(green, 1);
 8001114:	2101      	movs	r1, #1
 8001116:	2002      	movs	r0, #2
 8001118:	f7ff f818 	bl	800014c <on_light>
			  timer_counter_1 = green_counter;
 800111c:	2303      	movs	r3, #3
 800111e:	60bb      	str	r3, [r7, #8]
			  on_light(red, 2);
 8001120:	2102      	movs	r1, #2
 8001122:	2000      	movs	r0, #0
 8001124:	f7ff f812 	bl	800014c <on_light>
			  timer_counter_2 = red_counter;
 8001128:	2305      	movs	r3, #5
 800112a:	607b      	str	r3, [r7, #4]
		  }
		  break;
 800112c:	e01f      	b.n	800116e <main+0xbe>
	  case GREEN1_RED2:
		  if(timer_counter_1 <= 0)
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	2b00      	cmp	r3, #0
 8001132:	dc1e      	bgt.n	8001172 <main+0xc2>
		  {
			  current = YELLOW1_RED2;
 8001134:	2303      	movs	r3, #3
 8001136:	73fb      	strb	r3, [r7, #15]
			  on_light(yellow, 1);
 8001138:	2101      	movs	r1, #1
 800113a:	2001      	movs	r0, #1
 800113c:	f7ff f806 	bl	800014c <on_light>
			  timer_counter_1 = yellow_counter;
 8001140:	2302      	movs	r3, #2
 8001142:	60bb      	str	r3, [r7, #8]
		  }
		  break;
 8001144:	e015      	b.n	8001172 <main+0xc2>
	  default:
		  if(timer_counter_1 <= 0)
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	2b00      	cmp	r3, #0
 800114a:	dc13      	bgt.n	8001174 <main+0xc4>
		  {
			  current = RED1_GREEN2;
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]
			  on_light(red, 1);
 8001150:	2101      	movs	r1, #1
 8001152:	2000      	movs	r0, #0
 8001154:	f7fe fffa 	bl	800014c <on_light>
			  timer_counter_1 = red_counter;
 8001158:	2305      	movs	r3, #5
 800115a:	60bb      	str	r3, [r7, #8]
			  on_light(green, 2);
 800115c:	2102      	movs	r1, #2
 800115e:	2002      	movs	r0, #2
 8001160:	f7fe fff4 	bl	800014c <on_light>
			  timer_counter_2 = green_counter;
 8001164:	2303      	movs	r3, #3
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	e004      	b.n	8001174 <main+0xc4>
		  break;
 800116a:	bf00      	nop
 800116c:	e002      	b.n	8001174 <main+0xc4>
		  break;
 800116e:	bf00      	nop
 8001170:	e000      	b.n	8001174 <main+0xc4>
		  break;
 8001172:	bf00      	nop
		  }
	  }
	  display7SEG(timer_counter_1, 1);
 8001174:	2101      	movs	r1, #1
 8001176:	68b8      	ldr	r0, [r7, #8]
 8001178:	f7ff f8c2 	bl	8000300 <display7SEG>
	  display7SEG(timer_counter_2, 2);
 800117c:	2102      	movs	r1, #2
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff f8be 	bl	8000300 <display7SEG>
	  timer_counter_1--;
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	3b01      	subs	r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
	  timer_counter_2--;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3b01      	subs	r3, #1
 800118e:	607b      	str	r3, [r7, #4]
	  HAL_Delay(1000);
 8001190:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001194:	f000 f96e 	bl	8001474 <HAL_Delay>
	  switch (current)
 8001198:	e7a1      	b.n	80010de <main+0x2e>

0800119a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b090      	sub	sp, #64	; 0x40
 800119e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a0:	f107 0318 	add.w	r3, r7, #24
 80011a4:	2228      	movs	r2, #40	; 0x28
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 ffdd 	bl	8002168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011bc:	2302      	movs	r3, #2
 80011be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c0:	2301      	movs	r3, #1
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c4:	2310      	movs	r3, #16
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011cc:	f107 0318 	add.w	r3, r7, #24
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 fbeb 	bl	80019ac <HAL_RCC_OscConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011dc:	f000 f86c 	bl	80012b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e0:	230f      	movs	r3, #15
 80011e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fe59 	bl	8001eb0 <HAL_RCC_ClockConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001204:	f000 f858 	bl	80012b8 <Error_Handler>
  }
}
 8001208:	bf00      	nop
 800120a:	3740      	adds	r7, #64	; 0x40
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <MX_GPIO_Init+0x9c>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a20      	ldr	r2, [pc, #128]	; (80012ac <MX_GPIO_Init+0x9c>)
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <MX_GPIO_Init+0x9c>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <MX_GPIO_Init+0x9c>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a1a      	ldr	r2, [pc, #104]	; (80012ac <MX_GPIO_Init+0x9c>)
 8001242:	f043 0308 	orr.w	r3, r3, #8
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_GPIO_Init+0x9c>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
 8001254:	2200      	movs	r2, #0
 8001256:	217e      	movs	r1, #126	; 0x7e
 8001258:	4815      	ldr	r0, [pc, #84]	; (80012b0 <MX_GPIO_Init+0xa0>)
 800125a:	f000 fb8f 	bl	800197c <HAL_GPIO_WritePin>
                          |YELLOW_2_Pin|GREEN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_1_Pin|b_1_Pin|c_1_Pin|d_2_Pin
 800125e:	2200      	movs	r2, #0
 8001260:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001264:	4813      	ldr	r0, [pc, #76]	; (80012b4 <MX_GPIO_Init+0xa4>)
 8001266:	f000 fb89 	bl	800197c <HAL_GPIO_WritePin>
                          |e_1_Pin|f_1_Pin|g_1_Pin|a_2_Pin
                          |b_2_Pin|c_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED_1_Pin YELLOW_1_Pin GREEN_1_Pin RED_2_Pin
                           YELLOW_2_Pin GREEN_2_Pin */
  GPIO_InitStruct.Pin = RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
 800126a:	237e      	movs	r3, #126	; 0x7e
 800126c:	60bb      	str	r3, [r7, #8]
                          |YELLOW_2_Pin|GREEN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126e:	2301      	movs	r3, #1
 8001270:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2302      	movs	r3, #2
 8001278:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	4619      	mov	r1, r3
 8001280:	480b      	ldr	r0, [pc, #44]	; (80012b0 <MX_GPIO_Init+0xa0>)
 8001282:	f000 f9ff 	bl	8001684 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_1_Pin b_1_Pin c_1_Pin d_2_Pin
                           e_2_Pin f_2_Pin g_2_Pin d_1_Pin
                           e_1_Pin f_1_Pin g_1_Pin a_2_Pin
                           b_2_Pin c_2_Pin */
  GPIO_InitStruct.Pin = a_1_Pin|b_1_Pin|c_1_Pin|d_2_Pin
 8001286:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800128a:	60bb      	str	r3, [r7, #8]
                          |e_2_Pin|f_2_Pin|g_2_Pin|d_1_Pin
                          |e_1_Pin|f_1_Pin|g_1_Pin|a_2_Pin
                          |b_2_Pin|c_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128c:	2301      	movs	r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2302      	movs	r3, #2
 8001296:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	f107 0308 	add.w	r3, r7, #8
 800129c:	4619      	mov	r1, r3
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_GPIO_Init+0xa4>)
 80012a0:	f000 f9f0 	bl	8001684 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012a4:	bf00      	nop
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010800 	.word	0x40010800
 80012b4:	40010c00 	.word	0x40010c00

080012b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012bc:	b672      	cpsid	i
}
 80012be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <Error_Handler+0x8>
	...

080012c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_MspInit+0x40>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <HAL_MspInit+0x40>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6193      	str	r3, [r2, #24]
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <HAL_MspInit+0x40>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <HAL_MspInit+0x40>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	4a07      	ldr	r2, [pc, #28]	; (8001304 <HAL_MspInit+0x40>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ec:	61d3      	str	r3, [r2, #28]
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_MspInit+0x40>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	40021000 	.word	0x40021000

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800130c:	e7fe      	b.n	800130c <NMI_Handler+0x4>

0800130e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <HardFault_Handler+0x4>

08001314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <MemManage_Handler+0x4>

0800131a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <BusFault_Handler+0x4>

08001320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <UsageFault_Handler+0x4>

08001326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr

08001332 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr

0800133e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr

0800134a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134e:	f000 f875 	bl	800143c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}

08001356 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
	...

08001364 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001364:	f7ff fff7 	bl	8001356 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001368:	480b      	ldr	r0, [pc, #44]	; (8001398 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800136a:	490c      	ldr	r1, [pc, #48]	; (800139c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800136c:	4a0c      	ldr	r2, [pc, #48]	; (80013a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001380:	4c09      	ldr	r4, [pc, #36]	; (80013a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800138e:	f000 fef3 	bl	8002178 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001392:	f7ff fe8d 	bl	80010b0 <main>
  bx lr
 8001396:	4770      	bx	lr
  ldr r0, =_sdata
 8001398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800139c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80013a0:	08002204 	.word	0x08002204
  ldr r2, =_sbss
 80013a4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80013a8:	200000a4 	.word	0x200000a4

080013ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC1_2_IRQHandler>
	...

080013b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <HAL_Init+0x28>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <HAL_Init+0x28>)
 80013ba:	f043 0310 	orr.w	r3, r3, #16
 80013be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c0:	2003      	movs	r0, #3
 80013c2:	f000 f92b 	bl	800161c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c6:	200f      	movs	r0, #15
 80013c8:	f000 f808 	bl	80013dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013cc:	f7ff ff7a 	bl	80012c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40022000 	.word	0x40022000

080013dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_InitTick+0x54>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_InitTick+0x58>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4619      	mov	r1, r3
 80013ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 f935 	bl	800166a <HAL_SYSTICK_Config>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e00e      	b.n	8001428 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b0f      	cmp	r3, #15
 800140e:	d80a      	bhi.n	8001426 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001410:	2200      	movs	r2, #0
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f000 f90b 	bl	8001632 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800141c:	4a06      	ldr	r2, [pc, #24]	; (8001438 <HAL_InitTick+0x5c>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	e000      	b.n	8001428 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000078 	.word	0x20000078
 8001434:	20000080 	.word	0x20000080
 8001438:	2000007c 	.word	0x2000007c

0800143c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_IncTick+0x1c>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <HAL_IncTick+0x20>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4413      	add	r3, r2
 800144c:	4a03      	ldr	r2, [pc, #12]	; (800145c <HAL_IncTick+0x20>)
 800144e:	6013      	str	r3, [r2, #0]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	20000080 	.word	0x20000080
 800145c:	200000a0 	.word	0x200000a0

08001460 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;
 8001464:	4b02      	ldr	r3, [pc, #8]	; (8001470 <HAL_GetTick+0x10>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	200000a0 	.word	0x200000a0

08001474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800147c:	f7ff fff0 	bl	8001460 <HAL_GetTick>
 8001480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148c:	d005      	beq.n	800149a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <HAL_Delay+0x44>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4413      	add	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800149a:	bf00      	nop
 800149c:	f7ff ffe0 	bl	8001460 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d8f7      	bhi.n	800149c <HAL_Delay+0x28>
  {
  }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000080 	.word	0x20000080

080014bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d8:	4013      	ands	r3, r2
 80014da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ee:	4a04      	ldr	r2, [pc, #16]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	60d3      	str	r3, [r2, #12]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <__NVIC_GetPriorityGrouping+0x18>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	f003 0307 	and.w	r3, r3, #7
}
 8001512:	4618      	mov	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	db0a      	blt.n	800154a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	490c      	ldr	r1, [pc, #48]	; (800156c <__NVIC_SetPriority+0x4c>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	440b      	add	r3, r1
 8001544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001548:	e00a      	b.n	8001560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4908      	ldr	r1, [pc, #32]	; (8001570 <__NVIC_SetPriority+0x50>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	3b04      	subs	r3, #4
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	440b      	add	r3, r1
 800155e:	761a      	strb	r2, [r3, #24]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f1c3 0307 	rsb	r3, r3, #7
 800158e:	2b04      	cmp	r3, #4
 8001590:	bf28      	it	cs
 8001592:	2304      	movcs	r3, #4
 8001594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3304      	adds	r3, #4
 800159a:	2b06      	cmp	r3, #6
 800159c:	d902      	bls.n	80015a4 <NVIC_EncodePriority+0x30>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3b03      	subs	r3, #3
 80015a2:	e000      	b.n	80015a6 <NVIC_EncodePriority+0x32>
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43d9      	mvns	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	4313      	orrs	r3, r2
         );
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3724      	adds	r7, #36	; 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e8:	d301      	bcc.n	80015ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00f      	b.n	800160e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <SysTick_Config+0x40>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f6:	210f      	movs	r1, #15
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	f7ff ff90 	bl	8001520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <SysTick_Config+0x40>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001606:	4b04      	ldr	r3, [pc, #16]	; (8001618 <SysTick_Config+0x40>)
 8001608:	2207      	movs	r2, #7
 800160a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	e000e010 	.word	0xe000e010

0800161c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ff49 	bl	80014bc <__NVIC_SetPriorityGrouping>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001632:	b580      	push	{r7, lr}
 8001634:	b086      	sub	sp, #24
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
 800163e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001644:	f7ff ff5e 	bl	8001504 <__NVIC_GetPriorityGrouping>
 8001648:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	68b9      	ldr	r1, [r7, #8]
 800164e:	6978      	ldr	r0, [r7, #20]
 8001650:	f7ff ff90 	bl	8001574 <NVIC_EncodePriority>
 8001654:	4602      	mov	r2, r0
 8001656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff5f 	bl	8001520 <__NVIC_SetPriority>
}
 8001662:	bf00      	nop
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ffb0 	bl	80015d8 <SysTick_Config>
 8001678:	4603      	mov	r3, r0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001684:	b480      	push	{r7}
 8001686:	b08b      	sub	sp, #44	; 0x2c
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001696:	e161      	b.n	800195c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001698:	2201      	movs	r2, #1
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	f040 8150 	bne.w	8001956 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	4a97      	ldr	r2, [pc, #604]	; (8001918 <HAL_GPIO_Init+0x294>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d05e      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016c0:	4a95      	ldr	r2, [pc, #596]	; (8001918 <HAL_GPIO_Init+0x294>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d875      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016c6:	4a95      	ldr	r2, [pc, #596]	; (800191c <HAL_GPIO_Init+0x298>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d058      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016cc:	4a93      	ldr	r2, [pc, #588]	; (800191c <HAL_GPIO_Init+0x298>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d86f      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016d2:	4a93      	ldr	r2, [pc, #588]	; (8001920 <HAL_GPIO_Init+0x29c>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d052      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016d8:	4a91      	ldr	r2, [pc, #580]	; (8001920 <HAL_GPIO_Init+0x29c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d869      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016de:	4a91      	ldr	r2, [pc, #580]	; (8001924 <HAL_GPIO_Init+0x2a0>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d04c      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016e4:	4a8f      	ldr	r2, [pc, #572]	; (8001924 <HAL_GPIO_Init+0x2a0>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d863      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016ea:	4a8f      	ldr	r2, [pc, #572]	; (8001928 <HAL_GPIO_Init+0x2a4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d046      	beq.n	800177e <HAL_GPIO_Init+0xfa>
 80016f0:	4a8d      	ldr	r2, [pc, #564]	; (8001928 <HAL_GPIO_Init+0x2a4>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d85d      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016f6:	2b12      	cmp	r3, #18
 80016f8:	d82a      	bhi.n	8001750 <HAL_GPIO_Init+0xcc>
 80016fa:	2b12      	cmp	r3, #18
 80016fc:	d859      	bhi.n	80017b2 <HAL_GPIO_Init+0x12e>
 80016fe:	a201      	add	r2, pc, #4	; (adr r2, 8001704 <HAL_GPIO_Init+0x80>)
 8001700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001704:	0800177f 	.word	0x0800177f
 8001708:	08001759 	.word	0x08001759
 800170c:	0800176b 	.word	0x0800176b
 8001710:	080017ad 	.word	0x080017ad
 8001714:	080017b3 	.word	0x080017b3
 8001718:	080017b3 	.word	0x080017b3
 800171c:	080017b3 	.word	0x080017b3
 8001720:	080017b3 	.word	0x080017b3
 8001724:	080017b3 	.word	0x080017b3
 8001728:	080017b3 	.word	0x080017b3
 800172c:	080017b3 	.word	0x080017b3
 8001730:	080017b3 	.word	0x080017b3
 8001734:	080017b3 	.word	0x080017b3
 8001738:	080017b3 	.word	0x080017b3
 800173c:	080017b3 	.word	0x080017b3
 8001740:	080017b3 	.word	0x080017b3
 8001744:	080017b3 	.word	0x080017b3
 8001748:	08001761 	.word	0x08001761
 800174c:	08001775 	.word	0x08001775
 8001750:	4a76      	ldr	r2, [pc, #472]	; (800192c <HAL_GPIO_Init+0x2a8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d013      	beq.n	800177e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001756:	e02c      	b.n	80017b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	623b      	str	r3, [r7, #32]
          break;
 800175e:	e029      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	3304      	adds	r3, #4
 8001766:	623b      	str	r3, [r7, #32]
          break;
 8001768:	e024      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	3308      	adds	r3, #8
 8001770:	623b      	str	r3, [r7, #32]
          break;
 8001772:	e01f      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	330c      	adds	r3, #12
 800177a:	623b      	str	r3, [r7, #32]
          break;
 800177c:	e01a      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d102      	bne.n	800178c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001786:	2304      	movs	r3, #4
 8001788:	623b      	str	r3, [r7, #32]
          break;
 800178a:	e013      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d105      	bne.n	80017a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001794:	2308      	movs	r3, #8
 8001796:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	611a      	str	r2, [r3, #16]
          break;
 800179e:	e009      	b.n	80017b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017a0:	2308      	movs	r3, #8
 80017a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	615a      	str	r2, [r3, #20]
          break;
 80017aa:	e003      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017ac:	2300      	movs	r3, #0
 80017ae:	623b      	str	r3, [r7, #32]
          break;
 80017b0:	e000      	b.n	80017b4 <HAL_GPIO_Init+0x130>
          break;
 80017b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2bff      	cmp	r3, #255	; 0xff
 80017b8:	d801      	bhi.n	80017be <HAL_GPIO_Init+0x13a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	e001      	b.n	80017c2 <HAL_GPIO_Init+0x13e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3304      	adds	r3, #4
 80017c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2bff      	cmp	r3, #255	; 0xff
 80017c8:	d802      	bhi.n	80017d0 <HAL_GPIO_Init+0x14c>
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	e002      	b.n	80017d6 <HAL_GPIO_Init+0x152>
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	3b08      	subs	r3, #8
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	210f      	movs	r1, #15
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	fa01 f303 	lsl.w	r3, r1, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	401a      	ands	r2, r3
 80017e8:	6a39      	ldr	r1, [r7, #32]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	431a      	orrs	r2, r3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 80a9 	beq.w	8001956 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001804:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <HAL_GPIO_Init+0x2ac>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	4a49      	ldr	r2, [pc, #292]	; (8001930 <HAL_GPIO_Init+0x2ac>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6193      	str	r3, [r2, #24]
 8001810:	4b47      	ldr	r3, [pc, #284]	; (8001930 <HAL_GPIO_Init+0x2ac>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800181c:	4a45      	ldr	r2, [pc, #276]	; (8001934 <HAL_GPIO_Init+0x2b0>)
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	089b      	lsrs	r3, r3, #2
 8001822:	3302      	adds	r3, #2
 8001824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001828:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	220f      	movs	r2, #15
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4013      	ands	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a3d      	ldr	r2, [pc, #244]	; (8001938 <HAL_GPIO_Init+0x2b4>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d00d      	beq.n	8001864 <HAL_GPIO_Init+0x1e0>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a3c      	ldr	r2, [pc, #240]	; (800193c <HAL_GPIO_Init+0x2b8>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d007      	beq.n	8001860 <HAL_GPIO_Init+0x1dc>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a3b      	ldr	r2, [pc, #236]	; (8001940 <HAL_GPIO_Init+0x2bc>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d101      	bne.n	800185c <HAL_GPIO_Init+0x1d8>
 8001858:	2302      	movs	r3, #2
 800185a:	e004      	b.n	8001866 <HAL_GPIO_Init+0x1e2>
 800185c:	2303      	movs	r3, #3
 800185e:	e002      	b.n	8001866 <HAL_GPIO_Init+0x1e2>
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <HAL_GPIO_Init+0x1e2>
 8001864:	2300      	movs	r3, #0
 8001866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001868:	f002 0203 	and.w	r2, r2, #3
 800186c:	0092      	lsls	r2, r2, #2
 800186e:	4093      	lsls	r3, r2
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001876:	492f      	ldr	r1, [pc, #188]	; (8001934 <HAL_GPIO_Init+0x2b0>)
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	3302      	adds	r3, #2
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d006      	beq.n	800189e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001890:	4b2c      	ldr	r3, [pc, #176]	; (8001944 <HAL_GPIO_Init+0x2c0>)
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	492b      	ldr	r1, [pc, #172]	; (8001944 <HAL_GPIO_Init+0x2c0>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	608b      	str	r3, [r1, #8]
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800189e:	4b29      	ldr	r3, [pc, #164]	; (8001944 <HAL_GPIO_Init+0x2c0>)
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	4927      	ldr	r1, [pc, #156]	; (8001944 <HAL_GPIO_Init+0x2c0>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d006      	beq.n	80018c6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018b8:	4b22      	ldr	r3, [pc, #136]	; (8001944 <HAL_GPIO_Init+0x2c0>)
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	4921      	ldr	r1, [pc, #132]	; (8001944 <HAL_GPIO_Init+0x2c0>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	60cb      	str	r3, [r1, #12]
 80018c4:	e006      	b.n	80018d4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018c6:	4b1f      	ldr	r3, [pc, #124]	; (8001944 <HAL_GPIO_Init+0x2c0>)
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	491d      	ldr	r1, [pc, #116]	; (8001944 <HAL_GPIO_Init+0x2c0>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d006      	beq.n	80018ee <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018e0:	4b18      	ldr	r3, [pc, #96]	; (8001944 <HAL_GPIO_Init+0x2c0>)
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	4917      	ldr	r1, [pc, #92]	; (8001944 <HAL_GPIO_Init+0x2c0>)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
 80018ec:	e006      	b.n	80018fc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_GPIO_Init+0x2c0>)
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	4913      	ldr	r1, [pc, #76]	; (8001944 <HAL_GPIO_Init+0x2c0>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d01f      	beq.n	8001948 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001908:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <HAL_GPIO_Init+0x2c0>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	490d      	ldr	r1, [pc, #52]	; (8001944 <HAL_GPIO_Init+0x2c0>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	600b      	str	r3, [r1, #0]
 8001914:	e01f      	b.n	8001956 <HAL_GPIO_Init+0x2d2>
 8001916:	bf00      	nop
 8001918:	10320000 	.word	0x10320000
 800191c:	10310000 	.word	0x10310000
 8001920:	10220000 	.word	0x10220000
 8001924:	10210000 	.word	0x10210000
 8001928:	10120000 	.word	0x10120000
 800192c:	10110000 	.word	0x10110000
 8001930:	40021000 	.word	0x40021000
 8001934:	40010000 	.word	0x40010000
 8001938:	40010800 	.word	0x40010800
 800193c:	40010c00 	.word	0x40010c00
 8001940:	40011000 	.word	0x40011000
 8001944:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_GPIO_Init+0x2f4>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	43db      	mvns	r3, r3
 8001950:	4909      	ldr	r1, [pc, #36]	; (8001978 <HAL_GPIO_Init+0x2f4>)
 8001952:	4013      	ands	r3, r2
 8001954:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	3301      	adds	r3, #1
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	fa22 f303 	lsr.w	r3, r2, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	f47f ae96 	bne.w	8001698 <HAL_GPIO_Init+0x14>
  }
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	372c      	adds	r7, #44	; 0x2c
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	40010400 	.word	0x40010400

0800197c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
 8001988:	4613      	mov	r3, r2
 800198a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800198c:	787b      	ldrb	r3, [r7, #1]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001998:	e003      	b.n	80019a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800199a:	887b      	ldrh	r3, [r7, #2]
 800199c:	041a      	lsls	r2, r3, #16
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	611a      	str	r2, [r3, #16]
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e272      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 8087 	beq.w	8001ada <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019cc:	4b92      	ldr	r3, [pc, #584]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d00c      	beq.n	80019f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019d8:	4b8f      	ldr	r3, [pc, #572]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 030c 	and.w	r3, r3, #12
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d112      	bne.n	8001a0a <HAL_RCC_OscConfig+0x5e>
 80019e4:	4b8c      	ldr	r3, [pc, #560]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f0:	d10b      	bne.n	8001a0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f2:	4b89      	ldr	r3, [pc, #548]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d06c      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x12c>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d168      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e24c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a12:	d106      	bne.n	8001a22 <HAL_RCC_OscConfig+0x76>
 8001a14:	4b80      	ldr	r3, [pc, #512]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a7f      	ldr	r2, [pc, #508]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	e02e      	b.n	8001a80 <HAL_RCC_OscConfig+0xd4>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0x98>
 8001a2a:	4b7b      	ldr	r3, [pc, #492]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a7a      	ldr	r2, [pc, #488]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	4b78      	ldr	r3, [pc, #480]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a77      	ldr	r2, [pc, #476]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e01d      	b.n	8001a80 <HAL_RCC_OscConfig+0xd4>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a4c:	d10c      	bne.n	8001a68 <HAL_RCC_OscConfig+0xbc>
 8001a4e:	4b72      	ldr	r3, [pc, #456]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a71      	ldr	r2, [pc, #452]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	4b6f      	ldr	r3, [pc, #444]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a6e      	ldr	r2, [pc, #440]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	e00b      	b.n	8001a80 <HAL_RCC_OscConfig+0xd4>
 8001a68:	4b6b      	ldr	r3, [pc, #428]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a6a      	ldr	r2, [pc, #424]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	4b68      	ldr	r3, [pc, #416]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a67      	ldr	r2, [pc, #412]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d013      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7ff fcea 	bl	8001460 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a90:	f7ff fce6 	bl	8001460 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b64      	cmp	r3, #100	; 0x64
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e200      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa2:	4b5d      	ldr	r3, [pc, #372]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0xe4>
 8001aae:	e014      	b.n	8001ada <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fcd6 	bl	8001460 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab8:	f7ff fcd2 	bl	8001460 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b64      	cmp	r3, #100	; 0x64
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e1ec      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aca:	4b53      	ldr	r3, [pc, #332]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x10c>
 8001ad6:	e000      	b.n	8001ada <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d063      	beq.n	8001bae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ae6:	4b4c      	ldr	r3, [pc, #304]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00b      	beq.n	8001b0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001af2:	4b49      	ldr	r3, [pc, #292]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d11c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x18c>
 8001afe:	4b46      	ldr	r3, [pc, #280]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d116      	bne.n	8001b38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0a:	4b43      	ldr	r3, [pc, #268]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d005      	beq.n	8001b22 <HAL_RCC_OscConfig+0x176>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d001      	beq.n	8001b22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e1c0      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b22:	4b3d      	ldr	r3, [pc, #244]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4939      	ldr	r1, [pc, #228]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b36:	e03a      	b.n	8001bae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d020      	beq.n	8001b82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b40:	4b36      	ldr	r3, [pc, #216]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7ff fc8b 	bl	8001460 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b4e:	f7ff fc87 	bl	8001460 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e1a1      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b60:	4b2d      	ldr	r3, [pc, #180]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6c:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	4927      	ldr	r1, [pc, #156]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	600b      	str	r3, [r1, #0]
 8001b80:	e015      	b.n	8001bae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7ff fc6a 	bl	8001460 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b90:	f7ff fc66 	bl	8001460 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e180      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d03a      	beq.n	8001c30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d019      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <HAL_RCC_OscConfig+0x274>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc8:	f7ff fc4a 	bl	8001460 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd0:	f7ff fc46 	bl	8001460 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e160      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f000 fa9c 	bl	800212c <RCC_Delay>
 8001bf4:	e01c      	b.n	8001c30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_RCC_OscConfig+0x274>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfc:	f7ff fc30 	bl	8001460 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c02:	e00f      	b.n	8001c24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c04:	f7ff fc2c 	bl	8001460 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d908      	bls.n	8001c24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e146      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	42420000 	.word	0x42420000
 8001c20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c24:	4b92      	ldr	r3, [pc, #584]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1e9      	bne.n	8001c04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 80a6 	beq.w	8001d8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c42:	4b8b      	ldr	r3, [pc, #556]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10d      	bne.n	8001c6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	4b88      	ldr	r3, [pc, #544]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	4a87      	ldr	r2, [pc, #540]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c58:	61d3      	str	r3, [r2, #28]
 8001c5a:	4b85      	ldr	r3, [pc, #532]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c66:	2301      	movs	r3, #1
 8001c68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6a:	4b82      	ldr	r3, [pc, #520]	; (8001e74 <HAL_RCC_OscConfig+0x4c8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d118      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c76:	4b7f      	ldr	r3, [pc, #508]	; (8001e74 <HAL_RCC_OscConfig+0x4c8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a7e      	ldr	r2, [pc, #504]	; (8001e74 <HAL_RCC_OscConfig+0x4c8>)
 8001c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c82:	f7ff fbed 	bl	8001460 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8a:	f7ff fbe9 	bl	8001460 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b64      	cmp	r3, #100	; 0x64
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e103      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9c:	4b75      	ldr	r3, [pc, #468]	; (8001e74 <HAL_RCC_OscConfig+0x4c8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d106      	bne.n	8001cbe <HAL_RCC_OscConfig+0x312>
 8001cb0:	4b6f      	ldr	r3, [pc, #444]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4a6e      	ldr	r2, [pc, #440]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6213      	str	r3, [r2, #32]
 8001cbc:	e02d      	b.n	8001d1a <HAL_RCC_OscConfig+0x36e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x334>
 8001cc6:	4b6a      	ldr	r3, [pc, #424]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	4a69      	ldr	r2, [pc, #420]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	6213      	str	r3, [r2, #32]
 8001cd2:	4b67      	ldr	r3, [pc, #412]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	4a66      	ldr	r2, [pc, #408]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	f023 0304 	bic.w	r3, r3, #4
 8001cdc:	6213      	str	r3, [r2, #32]
 8001cde:	e01c      	b.n	8001d1a <HAL_RCC_OscConfig+0x36e>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	2b05      	cmp	r3, #5
 8001ce6:	d10c      	bne.n	8001d02 <HAL_RCC_OscConfig+0x356>
 8001ce8:	4b61      	ldr	r3, [pc, #388]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4a60      	ldr	r2, [pc, #384]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001cee:	f043 0304 	orr.w	r3, r3, #4
 8001cf2:	6213      	str	r3, [r2, #32]
 8001cf4:	4b5e      	ldr	r3, [pc, #376]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	4a5d      	ldr	r2, [pc, #372]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6213      	str	r3, [r2, #32]
 8001d00:	e00b      	b.n	8001d1a <HAL_RCC_OscConfig+0x36e>
 8001d02:	4b5b      	ldr	r3, [pc, #364]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	4a5a      	ldr	r2, [pc, #360]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	f023 0301 	bic.w	r3, r3, #1
 8001d0c:	6213      	str	r3, [r2, #32]
 8001d0e:	4b58      	ldr	r3, [pc, #352]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	4a57      	ldr	r2, [pc, #348]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	f023 0304 	bic.w	r3, r3, #4
 8001d18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d015      	beq.n	8001d4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d22:	f7ff fb9d 	bl	8001460 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d28:	e00a      	b.n	8001d40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2a:	f7ff fb99 	bl	8001460 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e0b1      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d40:	4b4b      	ldr	r3, [pc, #300]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0ee      	beq.n	8001d2a <HAL_RCC_OscConfig+0x37e>
 8001d4c:	e014      	b.n	8001d78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4e:	f7ff fb87 	bl	8001460 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d54:	e00a      	b.n	8001d6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d56:	f7ff fb83 	bl	8001460 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e09b      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6c:	4b40      	ldr	r3, [pc, #256]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1ee      	bne.n	8001d56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d105      	bne.n	8001d8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7e:	4b3c      	ldr	r3, [pc, #240]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	4a3b      	ldr	r2, [pc, #236]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 8087 	beq.w	8001ea2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d94:	4b36      	ldr	r3, [pc, #216]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 030c 	and.w	r3, r3, #12
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d061      	beq.n	8001e64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d146      	bne.n	8001e36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da8:	4b33      	ldr	r3, [pc, #204]	; (8001e78 <HAL_RCC_OscConfig+0x4cc>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dae:	f7ff fb57 	bl	8001460 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db6:	f7ff fb53 	bl	8001460 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e06d      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc8:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f0      	bne.n	8001db6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ddc:	d108      	bne.n	8001df0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dde:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	4921      	ldr	r1, [pc, #132]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df0:	4b1f      	ldr	r3, [pc, #124]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a19      	ldr	r1, [r3, #32]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	430b      	orrs	r3, r1
 8001e02:	491b      	ldr	r1, [pc, #108]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <HAL_RCC_OscConfig+0x4cc>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0e:	f7ff fb27 	bl	8001460 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e16:	f7ff fb23 	bl	8001460 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e03d      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x46a>
 8001e34:	e035      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <HAL_RCC_OscConfig+0x4cc>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fb10 	bl	8001460 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e44:	f7ff fb0c 	bl	8001460 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e026      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x498>
 8001e62:	e01e      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d107      	bne.n	8001e7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e019      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40007000 	.word	0x40007000
 8001e78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_RCC_OscConfig+0x500>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d106      	bne.n	8001e9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d001      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000

08001eb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0d0      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec4:	4b6a      	ldr	r3, [pc, #424]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d910      	bls.n	8001ef4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed2:	4b67      	ldr	r3, [pc, #412]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 0207 	bic.w	r2, r3, #7
 8001eda:	4965      	ldr	r1, [pc, #404]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee2:	4b63      	ldr	r3, [pc, #396]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0b8      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d020      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f0c:	4b59      	ldr	r3, [pc, #356]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	4a58      	ldr	r2, [pc, #352]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f24:	4b53      	ldr	r3, [pc, #332]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	4a52      	ldr	r2, [pc, #328]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f30:	4b50      	ldr	r3, [pc, #320]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	494d      	ldr	r1, [pc, #308]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d040      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d107      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	4b47      	ldr	r3, [pc, #284]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d115      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e07f      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d107      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6e:	4b41      	ldr	r3, [pc, #260]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d109      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e073      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7e:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e06b      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f8e:	4b39      	ldr	r3, [pc, #228]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f023 0203 	bic.w	r2, r3, #3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4936      	ldr	r1, [pc, #216]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fa0:	f7ff fa5e 	bl	8001460 <HAL_GetTick>
 8001fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa6:	e00a      	b.n	8001fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa8:	f7ff fa5a 	bl	8001460 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e053      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 020c 	and.w	r2, r3, #12
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d1eb      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd0:	4b27      	ldr	r3, [pc, #156]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d210      	bcs.n	8002000 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fde:	4b24      	ldr	r3, [pc, #144]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 0207 	bic.w	r2, r3, #7
 8001fe6:	4922      	ldr	r1, [pc, #136]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fee:	4b20      	ldr	r3, [pc, #128]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e032      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d008      	beq.n	800201e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	4916      	ldr	r1, [pc, #88]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	4313      	orrs	r3, r2
 800201c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	490e      	ldr	r1, [pc, #56]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	4313      	orrs	r3, r2
 800203c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800203e:	f000 f821 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 8002042:	4602      	mov	r2, r0
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	490a      	ldr	r1, [pc, #40]	; (8002078 <HAL_RCC_ClockConfig+0x1c8>)
 8002050:	5ccb      	ldrb	r3, [r1, r3]
 8002052:	fa22 f303 	lsr.w	r3, r2, r3
 8002056:	4a09      	ldr	r2, [pc, #36]	; (800207c <HAL_RCC_ClockConfig+0x1cc>)
 8002058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <HAL_RCC_ClockConfig+0x1d0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff f9bc 	bl	80013dc <HAL_InitTick>

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40022000 	.word	0x40022000
 8002074:	40021000 	.word	0x40021000
 8002078:	080021d8 	.word	0x080021d8
 800207c:	20000078 	.word	0x20000078
 8002080:	2000007c 	.word	0x2000007c

08002084 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002084:	b480      	push	{r7}
 8002086:	b087      	sub	sp, #28
 8002088:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800209e:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <HAL_RCC_GetSysClockFreq+0x94>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d002      	beq.n	80020b4 <HAL_RCC_GetSysClockFreq+0x30>
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d003      	beq.n	80020ba <HAL_RCC_GetSysClockFreq+0x36>
 80020b2:	e027      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_RCC_GetSysClockFreq+0x98>)
 80020b6:	613b      	str	r3, [r7, #16]
      break;
 80020b8:	e027      	b.n	800210a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	0c9b      	lsrs	r3, r3, #18
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	4a17      	ldr	r2, [pc, #92]	; (8002120 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020c4:	5cd3      	ldrb	r3, [r2, r3]
 80020c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d010      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020d2:	4b11      	ldr	r3, [pc, #68]	; (8002118 <HAL_RCC_GetSysClockFreq+0x94>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	0c5b      	lsrs	r3, r3, #17
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	4a11      	ldr	r2, [pc, #68]	; (8002124 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020de:	5cd3      	ldrb	r3, [r2, r3]
 80020e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a0d      	ldr	r2, [pc, #52]	; (800211c <HAL_RCC_GetSysClockFreq+0x98>)
 80020e6:	fb03 f202 	mul.w	r2, r3, r2
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	e004      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a0c      	ldr	r2, [pc, #48]	; (8002128 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020f8:	fb02 f303 	mul.w	r3, r2, r3
 80020fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	613b      	str	r3, [r7, #16]
      break;
 8002102:	e002      	b.n	800210a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <HAL_RCC_GetSysClockFreq+0x98>)
 8002106:	613b      	str	r3, [r7, #16]
      break;
 8002108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800210a:	693b      	ldr	r3, [r7, #16]
}
 800210c:	4618      	mov	r0, r3
 800210e:	371c      	adds	r7, #28
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	007a1200 	.word	0x007a1200
 8002120:	080021e8 	.word	0x080021e8
 8002124:	080021f8 	.word	0x080021f8
 8002128:	003d0900 	.word	0x003d0900

0800212c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002134:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <RCC_Delay+0x34>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <RCC_Delay+0x38>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	0a5b      	lsrs	r3, r3, #9
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	fb02 f303 	mul.w	r3, r2, r3
 8002146:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002148:	bf00      	nop
  }
  while (Delay --);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1e5a      	subs	r2, r3, #1
 800214e:	60fa      	str	r2, [r7, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f9      	bne.n	8002148 <RCC_Delay+0x1c>
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	20000078 	.word	0x20000078
 8002164:	10624dd3 	.word	0x10624dd3

08002168 <memset>:
 8002168:	4603      	mov	r3, r0
 800216a:	4402      	add	r2, r0
 800216c:	4293      	cmp	r3, r2
 800216e:	d100      	bne.n	8002172 <memset+0xa>
 8002170:	4770      	bx	lr
 8002172:	f803 1b01 	strb.w	r1, [r3], #1
 8002176:	e7f9      	b.n	800216c <memset+0x4>

08002178 <__libc_init_array>:
 8002178:	b570      	push	{r4, r5, r6, lr}
 800217a:	2600      	movs	r6, #0
 800217c:	4d0c      	ldr	r5, [pc, #48]	; (80021b0 <__libc_init_array+0x38>)
 800217e:	4c0d      	ldr	r4, [pc, #52]	; (80021b4 <__libc_init_array+0x3c>)
 8002180:	1b64      	subs	r4, r4, r5
 8002182:	10a4      	asrs	r4, r4, #2
 8002184:	42a6      	cmp	r6, r4
 8002186:	d109      	bne.n	800219c <__libc_init_array+0x24>
 8002188:	f000 f81a 	bl	80021c0 <_init>
 800218c:	2600      	movs	r6, #0
 800218e:	4d0a      	ldr	r5, [pc, #40]	; (80021b8 <__libc_init_array+0x40>)
 8002190:	4c0a      	ldr	r4, [pc, #40]	; (80021bc <__libc_init_array+0x44>)
 8002192:	1b64      	subs	r4, r4, r5
 8002194:	10a4      	asrs	r4, r4, #2
 8002196:	42a6      	cmp	r6, r4
 8002198:	d105      	bne.n	80021a6 <__libc_init_array+0x2e>
 800219a:	bd70      	pop	{r4, r5, r6, pc}
 800219c:	f855 3b04 	ldr.w	r3, [r5], #4
 80021a0:	4798      	blx	r3
 80021a2:	3601      	adds	r6, #1
 80021a4:	e7ee      	b.n	8002184 <__libc_init_array+0xc>
 80021a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80021aa:	4798      	blx	r3
 80021ac:	3601      	adds	r6, #1
 80021ae:	e7f2      	b.n	8002196 <__libc_init_array+0x1e>
 80021b0:	080021fc 	.word	0x080021fc
 80021b4:	080021fc 	.word	0x080021fc
 80021b8:	080021fc 	.word	0x080021fc
 80021bc:	08002200 	.word	0x08002200

080021c0 <_init>:
 80021c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021c2:	bf00      	nop
 80021c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021c6:	bc08      	pop	{r3}
 80021c8:	469e      	mov	lr, r3
 80021ca:	4770      	bx	lr

080021cc <_fini>:
 80021cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ce:	bf00      	nop
 80021d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021d2:	bc08      	pop	{r3}
 80021d4:	469e      	mov	lr, r3
 80021d6:	4770      	bx	lr
